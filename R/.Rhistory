library(igraph)
install.packages("igraph")
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
BiocManager::install("igraph")
rm(list = ls())
library(randomForest)
library(caTools)
setwd("~/Desktop/Codes/Cancer_DRP/R")
## Read data
GE1 = readRDS("Data/Processed_Data/expresion_matrix.rds")
GE =  read.csv("Data/Processed_Data/expresion_matrix.csv")
sen = readRDS("Data/Processed_Data/sensitivity_matrix.rds")
## Read data
GE = readRDS("Data/Processed_Data/expresion_matrix.rds")
sen = readRDS("Data/Processed_Data/sensitivity_matrix.rds")
setwd("~/Desktop/Cancer_DRP/R")
## Read data
GE = readRDS("Data/Processed_Data/expresion_matrix.rds")
sen = readRDS("Data/Processed_Data/sensitivity_matrix.rds")
View(sen)
min(sen)
min(~is.na(sen))
is.na(sen)
!is.na(sen)
min(sen,na.rm = TRUE)
max(sen,na.rm = TRUE)
a = apply(sen,2,function(x){return(cor(x,x[,325]))}
)
length(sen[,325])
dim(sen)
a = apply(sen,2,function(x){return(cor(x,x[,325],use="complete.obs"))}
)
cor(sen[,1],sen[,325])
cor(sen[,1],sen[,325],use="compelete.obs")
cor(sen[,1],sen[,325],use="complete.obs")
a = apply(sen,2,function(x){return(cor(x,x[,325],use="complete.obs"))})
a = apply(sen,1,function(x){return(cor(x,x[,325],use="complete.obs"))})
a = apply(sen,2,function(x){return(cor(x,x[,325],use="complete.obs"))})
dim(sen)
a = apply(sen,2,function(x){return(cor(x,sen[,325],use="complete.obs"))})
sort(a,decreasing = TRUE)
a = apply(sen,2,function(x){return(cor(x,sen[,325],use="complete.obs"))})
max(a)
class(a)
s = sort(a,decreasing = TRUE)
s = which(sort(a,decreasing = TRUE))
s = which(a(sort(a,decreasing = TRUE)))
a = apply(sen,2,function(x){return(cor(x,sen[,325],use="complete.obs"))})
s = which(sort(a,decreasing = TRUE))
s = order(a,decreasing = TRUE)
s[1:6]
t = sort(a,decreasing = TRUE)
t[1:10]
t[1:20]
s[1:10]
source("~/Desktop/Cancer_DRP/R/NN_PRISM.R")
source("~/Desktop/Cancer_DRP/R/NN_PRISM.R")
length(expr_each_drug)
length(sen_each_drug)
dim(expr_each_drug)
# Evaluate on test data and labels
#score <- model %>% evaluate(Xtest, Ytest_cat, batch_size = 10)
y_hat <- model %>% predict(Xtrain)
length(y_hat)
source("~/Desktop/Cancer_DRP/R/NN_PRISM.R")
length(y_hat)
length(Ytest)
# Evaluate on test data and labels
#score <- model %>% evaluate(Xtest, Ytest_cat, batch_size = 10)
y_hat <- model %>% predict(Xtest)
Final_Cor[j] = cor(Ytest,y_hat)
Final_Cor
source("~/Desktop/Cancer_DRP/R/NN_PRISM.R")
source("~/Desktop/Cancer_DRP/R/RF_PRISM.R")
source("~/Desktop/Cancer_DRP/R/RF_PRISM.R")
rm(list = ls())
library(keras)
library(tensorflow)
library(corrplot)
library(ggvis)
library(caTools)
setwd("~/Desktop/Cancer_DRP/R")
## Read data
GE = readRDS("Data/Processed_Data/expresion_matrix.rds")
sen = readRDS("Data/Processed_Data/sensitivity_matrix.rds")
## Classifier
i = 325
#i=1429
sen_each_drug = sen[,i]
sen_each_drug = sen_each_drug[!is.na(sen[,i])]
expr_each_drug = GE[!is.na(sen[,i]),] # remove cell lines that are "NA" For each drug
expr_each_drug = scale(expr_each_drug)
sen_each_drug = scale(sen_each_drug)
## Split data into train & test
sample = sample.split(sen_each_drug, SplitRatio = .8)
Xtrain = subset(expr_each_drug, sample == TRUE)
Xtest  = subset(expr_each_drug, sample == FALSE)
Ytrain = subset(sen_each_drug, sample == TRUE)
Ytest  = subset(sen_each_drug, sample == FALSE)
###Model
# Initialize a sequential model
model = keras_model_sequential()
# Add layers to the model
model %>%
layer_dense(units = 100, activation = 'sigmoid', input_shape = ncol(Xtrain)) %>%
#kernel_regularizer = regularizer_l2(0.001)) %>%
#layer_dropout(rate = 0.4) %>%
#kernel_initializer = "normal" ,
#bias_initializer = "Zeros") %>%
layer_dense(units = 10, activation = 'sigmoid') %>%
#layer_dropout(rate = 0.3) %>%
#layer_dense(units = 125, activation = 'relu') %>%
#layer_dropout(rate = 0.2) %>%
#layer_dense(units = 125, activation = 'relu') %>%
layer_dense(units = 1, activation = 'linear')
# Compile the model
model %>% compile(
loss = 'mse',
optimizer = optimizer_adam(learning_rate = 0.0001))
# Evaluate on test data and labels
#score <- model %>% evaluate(Xtest, Ytest_cat, batch_size = 10)
y_hat <- model %>% predict(Xtest)
cor(Ytest,y_hat)
source("~/Desktop/Cancer_DRP/R/NN_PRISM.R")
source("~/Desktop/Cancer_DRP/R/NN_PRISM.R")
source("~/Desktop/Cancer_DRP/R/RF_PRISM.R")
## Corr input & output
Corr = cor(X,Y)
hist(abs(Corr))
View(Corr)
order(Corr,decreasing = TRUE)
high_corr = order(Corr,decreasing = TRUE)
dim(X)
X = X[,high_corr[1:200]]
dim(X)
source("~/Desktop/Cancer_DRP/R/RF_PRISM.R")
source("~/Desktop/Cancer_DRP/R/RF_PRISM.R")
