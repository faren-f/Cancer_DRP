library(igraph)
install.packages("igraph")
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
BiocManager::install("igraph")
## Distribution of drug-drug similarity matrix
sim_FP = readRDS("Data/Processed_Data/Fingerprints_sim.rds")
setwd("~/Desktop/Codes/Cancer_DRP/R")
rm(list = ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("Processed_data/S1/sensitivity_matrix_AUC.rds")
response = read.csv("Raw_data/PRISM/Secondary/secondary-screen-dose-response-curve-parameters.csv")
N_drugs = 1448
#Read decoupleR Transcription factor activities results
RF_TF = c()
ENet_TF = c()
Lasso_TF = c()
Ridge_TF = c()
MLP_TF = c()
for(i in 1:N_drugs){
print(i)
R_TF = readRDS(paste0("Processed_from_SLURM/Results_decoupleR_TF_Activities_All_Models/Result_",as.character(i),".rds"))
Ridge_TF = rbind(Ridge_TF, R_TF[4,])
MLP_TF = rbind(MLP_TF, R_TF[5,])
Lasso_TF = rbind(Lasso_TF, R_TF[3,])
ENet_TF = rbind(ENet_TF, R_TF[2,])
RF_TF = rbind(RF_TF, R_TF[1,])
}
rownames(Ridge_TF) = colnames(sen)
rownames(MLP_TF) = colnames(sen)
rownames(Lasso_TF) = colnames(sen)
rownames(ENet_TF) = colnames(sen)
rownames(RF_TF) = colnames(sen)
# Finding drugs with the same mechanism of actions
Moa = unique(response$moa)
Moa = strsplit(Moa,", ")
Moa = unique(unlist(Moa))
#saveRDS(d, "Final_Result/List_of_Drug_MOA.rds")
d = readRDS("Final_Result/List_of_Drug_MOA.rds")
D = c()
for(m in Moa){
if(length(d[[m]])>5){
D = c(D, m)
}
}
## obtain data for Landmark
data = list()
## obtain data for TF
data = list()
M = c()
for(b in 1:length(D)){
val = Ridge_TF[d[[D[b]]],1]
data[b] = list(val)
M = c(M, median(val))
}
##
Order = order(M, decreasing = FALSE)
D[Order]
boxplot(data[Order], horizontal = TRUE)
##
Order = order(M, decreasing = TRUE)
D[Order]
rm(list=ls())
library(ROCR)
source("F18-Combat_Normalization.R")
library(glmnet)
library(caret)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
dR_PRISM = read.table("Processed_data/S33/gsea2_PRISM.csv",sep = ",",header = TRUE, row.names = 1)
dR_TCGA = read.table("Processed_data/S33/gsea2_TCGA.csv",sep = ",",header = TRUE, row.names = 1)
Cor = cor(dR_TCGA)
diag(Cor) = 0
Max_Cor_TFs = apply(Cor,2,max)
hist(Max_Cor_TFs)
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(dR_TCGA,2,quantile,prob=0.75)
if(sum(q3_genes==0)>0){
dR_TCGA = dR_TCGA[,-which(q3_genes==0)]
dR_PRISM = dR_PRISM[,-which(q3_genes==0)]
}
SigDrugs = c("etoposide","paclitaxel","leucovorin",
"ifosfamide", "gemcitabine",
"cisplatin", "vinblastine")
result = c()
Wilcox_Test_AllDrugs = c()
T_Test_AllDrugs = c()
i="cisplatin"
#for (i in SigDrugs){
print(paste0("The drug number is: ", i))
Xtrain = dR_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = dR_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
train_data = cbind(Xtrain,ytrain)
control = trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
verboseIter = FALSE)
#tune = expand.grid(alpha = 0,lambda = seq(0.01,5,by = 0.01))
tune = expand.grid(alpha = 0,lambda = seq(0.01,5,by = 0.1))
model = caret::train(ytrain ~., data = train_data,
method = "glmnet",
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
y_pred = predict(model,Xtest)
Ranksum = wilcox.test(y_pred[ytest==1], y_pred[ytest==2], alternative ="greater")$p.value
Ranksum
Beta = as.matrix(coef(model$finalModel, model$bestTune$lambda))
i="etoposide"
result = c()
Wilcox_Test_AllDrugs = c()
T_Test_AllDrugs = c()
#for (i in SigDrugs){
print(paste0("The drug number is: ", i))
Xtrain = dR_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = dR_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
train_data = cbind(Xtrain,ytrain)
control = trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
verboseIter = FALSE)
#tune = expand.grid(alpha = 0,lambda = seq(0.01,5,by = 0.01))
tune = expand.grid(alpha = 0,lambda = seq(0.01,5,by = 0.1))
model = caret::train(ytrain ~., data = train_data,
method = "glmnet",
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
y_pred = predict(model,Xtest)
Ranksum = wilcox.test(y_pred[ytest==1], y_pred[ytest==2], alternative ="greater")$p.value
Beta = as.matrix(coef(model$finalModel, model$bestTune$lambda))
Beta_Null = c()
Wilcox_Test = c()
T_test = c()
for(j in 1:1000){
print(j)
ytrain_perm = sample(ytrain)
train_data = cbind(Xtrain, ytrain_perm)
control = trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
verboseIter = FALSE)
#tune = expand.grid(alpha = 0,lambda = seq(0.01,5,by = 0.05))
tune = expand.grid(alpha = 0, lambda = seq(0.01,5,by = 0.1))
model = caret::train(ytrain_perm ~., data = train_data,
method = "glmnet",
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
y_pred = predict(model,Xtest)
beta = as.matrix(coef(model$finalModel, model$bestTune$lambda))
Beta_Null = cbind(Beta_Null, beta)
}
saveRDS(Beta_Null, "Processed_data/P12/Beta_Null_Etoposide.rds")
P_val_Rank = c()
PNorm = c()
p.val_KS = c()
source("F27-Probability_Norm.R")
for(k in 1:nrow(Beta_Null)){
P = Probability_norm(abs(Beta[k]), abs(Beta_Null[k,]), alternative = "greater")
PNorm = c(PNorm, P)
p.val_KS = c(p.val_KS, ks.test(Beta_Null[k,], "pnorm", mean(Beta_Null[k,]),
sd(Beta_Null[k,]), exact = TRUE)$p.value)
P = rank.test(abs(Beta_Null[k,]), abs(Beta[k]), alternative = "greater")
P_val_Rank = c(P_val_Rank, P)
}
source("F27-Probability_Norm.R")
k=1
P = Probability_norm(abs(Beta[k]), abs(Beta_Null[k,]), alternative = "greater")
PNorm = c(PNorm, P)
p.val_KS = c(p.val_KS, ks.test(Beta_Null[k,], "pnorm", mean(Beta_Null[k,]),
sd(Beta_Null[k,]), exact = TRUE)$p.value)
P_val_Rank = c()
PNorm = c()
p.val_KS = c()
P = Probability_norm(abs(Beta[k]), abs(Beta_Null[k,]), alternative = "greater")
PNorm = c(PNorm, P)
p.val_KS = c(p.val_KS, ks.test(Beta_Null[k,], "pnorm", mean(Beta_Null[k,]),
sd(Beta_Null[k,]), exact = TRUE)$p.value)
P = rank.test(abs(Beta_Null[k,]), abs(Beta[k]), alternative = "greater")
#P = rank.test(abs(Beta_Null[k,]), abs(Beta[k]), alternative = "greater")
P_val_Rank = c(P_val_Rank, P)
P_val_Rank
P_val_Rank = c()
PNorm = c()
p.val_KS = c()
source("F27-Probability_Norm.R")
for(k in 1:nrow(Beta_Null)){
P = Probability_norm(abs(Beta[k]), abs(Beta_Null[k,]), alternative = "greater")
PNorm = c(PNorm, P)
p.val_KS = c(p.val_KS, ks.test(Beta_Null[k,], "pnorm", mean(Beta_Null[k,]),
sd(Beta_Null[k,]), exact = TRUE)$p.value)
#P = rank.test(abs(Beta_Null[k,]), abs(Beta[k]), alternative = "greater")
P_val_Rank = c(P_val_Rank, P)
}
hist(p.val_KS,100)
which(p.val_KS<0.05)
p.val_KS[p.val_KS<0.05]
View(dR_PRISM)
a = which(p.val_KS<0.05)
colnames(dR_PRISM)[a]
