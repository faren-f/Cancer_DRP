Xtest = X_Normalization[[2]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
y_pred = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr = cor(ytest,y_pred)
y_pred
ytest
ttest = t.test(y_pred[ytest==1], y_pred[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred[ytest==1], y_pred[ytest==2], alternative ="greater")$p.value
Ranksum
cor(ytest,y_pred)
print(paste0("The drug number is: ", as.character(i)))
Xtrain = dR_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = dR_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
dim(Xtrain)
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
y_pred = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
train_data = cbind(Xtrain,ytrain)
control = trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
verboseIter = FALSE)
tune = expand.grid(alpha = 0,lambda = seq(0.01,5,by = 0.1))
model = caret::train(ytrain ~., data = train_data,
method = "glmnet",
weights = weight,
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
weight = NULL
model = caret::train(ytrain ~., data = train_data,
method = "glmnet",
weights = weight,
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
y_pred = predict(model,Xtest)
y_pred
Xtest
View(model)
model = caret::train(ytrain ~., data = train_data,
method = "glmnet",
weights = weight,
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
Xtest
y_pred = predict(model,Xtest)
View(model)
Beta = as.matrix(coef(model$finalModel, model$bestTune$lambda))
View(Beta)
is.na(Xtest)
sum(is.na(Xtest))
View(Xtest)
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
# From R
# dR_PRISM = Omics_List[[1]]
# dR_TCGA = Omics_List[[3]]
#
# From Python
dR_PRISM = read.table("Processed_data/S34/wmean1_PRISM.csv",sep = ",",header = TRUE, row.names = 1)
dR_TCGA = read.table("Processed_data/S34/wmean1_PRISM.csv",sep = ",",header = TRUE, row.names = 1)
View(dR_TCGA)
hist(dR_TCGA)
hist(dR_TCGA[,1])
class(dR_TCGA)
q3_genes = apply(dR_TCGA,2,quantile,prob=0.75)
sum(q3_genes==0)
if(sum(q3_genes==0)>0){
dR_TCGA = dR_TCGA[,-which(q3_genes==0)]
dR_PRISM = dR_PRISM[,-which(q3_genes==0)]
}
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
clusterExport(cl, c("dR_PRISM","dR_TCGA","sen_PRISM","res_TCGA"))
clusterEvalQ(cl, c(source("F10-Ridge.R"), source("F18-Combat_Normalization.R")))
i=1
source("F10-Ridge.R")
source("F18-Combat_Normalization.R")
print(paste0("The drug number is: ", as.character(i)))
Xtrain = dR_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF5-decoupleR_PRISM@TCGA.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S36-heatmap_all_FR_methods.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S36-heatmap_all_FR_methods.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S36-heatmap_all_FR_methods.R")
pdf(paste0("Figures/FS/All_Methods/heatmap_all_FR_Methods.pdf"), height = 4, width = 5)
plt
dev.off()
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S36-heatmap_all_FR_methods.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S5_Read_Data_Multidrug_reg.R")
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
# Library -----------------------------------------------------------------
library(igraph)
# Read_Data ---------------------------------------------------------------
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
drug_sensitivity = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
sim_GE = abs(cor(t(GE)))
## Distribution of cell line-cell line similarity matrix
hist(sim_GE,30)
thr_binarize = 0.15
abline(v =thr_binarize, col = "red")
## Binarizing the cell line-cell line similarity matrix
sim_GE[sim_GE>thr_binarize] = 1
sim_GE[sim_GE<thr_binarize] = 0
## Assign Node numbers to celllines
cellline_Node = cbind(rownames(sim_GE),
c(0:(nrow(sim_GE)-1)))
rownames(sim_GE) = cellline_Node[,2]
colnames(sim_GE) = cellline_Node[,2]
## Make graph from adj to build edge_index
Graph_sample_sim = graph_from_adjacency_matrix(sim_GE,
mode = "undirected",diag = FALSE)
edge_index_cellline_1 = t(as_edgelist(Graph_sample_sim, names = TRUE))
#'@edge_index_cellline
edge_index_cellline = cbind(edge_index_cellline_1,edge_index_cellline_1[c(2,1),])
#'@node_attr_cellline
node_attr_cellline = GE
Fingerprints = readRDS("Data/Processed_Data/Fingerprints.rds")
Fingerprints = readRDS("Processed_Data/S2/Fingerprints.rds")
FP = matrix(0, length(Fingerprints), 1024)
for (i in 1:length(Fingerprints)){
FP_bits_on = Fingerprints[[i]]
FP[i,FP_bits_on@bits] = 1
}
node_attr_drug = FP
## Distribution of drug-drug similarity matrix
sim_FP = readRDS("Data/Processed_Data/Fingerprints_sim.rds")
## Distribution of drug-drug similarity matrix
sim_FP = readRDS("Processed_Data/S2/Fingerprints_sim.rds")
hist(sim_FP,150)
thr_binarize = 0.12
abline(v = thr_binarize, col = "red")
## Binarizing the drug-drug similarity matrix
sim_FP[sim_FP>thr_binarize] = 1
sim_FP[sim_FP<thr_binarize] = 0
## Assign Node numbers to drugs
drug_Node = cbind(rownames(sim_FP), c(0:(nrow(sim_FP)-1)))
rownames(sim_FP) = drug_Node[,2]
colnames(sim_FP) = drug_Node[,2]
## Make graph from adj to build edge_index_drug
Graph_drug_sim = graph_from_adjacency_matrix(sim_FP,
mode = "undirected",diag = FALSE)
edge_index_drug_1 = t(as_edgelist(Graph_drug_sim, names = TRUE))
#'@edge_index_drug
edge_index_drug = cbind(edge_index_drug_1,edge_index_drug_1[c(2,1),])
#'@node_attr_drug
node_attr_drug = FP
sen = drug_sensitivity
rownames(sen) = cellline_Node[,2]
colnames(sen) = drug_Node[,2]
#'@edge_index_cellline_drug
edge_index_cellline_drug = c()
edge_lable_cellline_drug = c()
for (i in 1:nrow(sen)){
ind1 = names(which(!is.na(sen[i,])))
edge_i_res = rbind(cellline = rep(i-1, length(ind1)), drug = ind1)
edge_index_cellline_drug = cbind(edge_index_cellline_drug,edge_i_res)
edge_lable_cellline_drug = c(edge_lable_cellline_drug,sen[i,ind1])
}
#'@Save_data_cell_line
write.table(node_attr_cellline, file = "Data/Processed_Data_For_Python/Create_cellline_drug_net/Regression/node_attr_cellline.csv",
row.names = FALSE, col.names = FALSE, quote = FALSE, sep = ",")
View(node_attr_drug)
View(node_attr_cellline)
dim(node_attr_drug)
dim(node_attr_cellline)
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE = GE[,-which(q3_genes==0)]
saveRDS(GE,"Processed_data/Other/GE_PRISM_CommonGeneswith_TCGA.rds")
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
# Library -----------------------------------------------------------------
library(igraph)
# Read_Data ---------------------------------------------------------------
#GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
GE = readRDS("Processed_data/Other/GE_PRISM_CommonGeneswith_TCGA.rds")
#drug_sensitivity = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
drug_sensitivity = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
#GE = apply(GE,2, function(x){return((x-min(x))/(max(x)-min(x)))})
GE = scale(GE)
sim_GE = abs(cor(t(GE)))
## Distribution of cell line-cell line similarity matrix
hist(sim_GE,30)
thr_binarize = 0.15
abline(v =thr_binarize, col = "red")
## Binarizing the cell line-cell line similarity matrix
sim_GE[sim_GE>thr_binarize] = 1
sim_GE[sim_GE<thr_binarize] = 0
View(sim_GE)
## Assign Node numbers to celllines
cellline_Node = cbind(rownames(sim_GE),c(0:(nrow(sim_GE)-1)))
View(cellline_Node)
rownames(sim_GE) = cellline_Node[,2]
colnames(sim_GE) = cellline_Node[,2]
## Make graph from adj to build edge_index
Graph_sample_sim = graph_from_adjacency_matrix(sim_GE,mode = "undirected",diag = FALSE)
View(Graph_sample_sim)
edge_index_cellline_1 = t(as_edgelist(Graph_sample_sim, names = TRUE))
View(edge_index_cellline_1)
Graph_sample_sim[[1]]
Graph_sample_sim_6 = graph_from_adjacency_matrix(sim_GE,mode = "directed",diag = FALSE)
View(Graph_sample_sim_6)
Graph_sample_sim_6[[1]]
Graph_sample_sim_6[[2]]
Graph_sample_sim_6[[475]]
View(Graph_sample_sim)
Graph_sample_sim[[475]]
#'@edge_index_cellline
edge_index_cellline = cbind(edge_index_cellline_1,edge_index_cellline_1[c(2,1),])
View(edge_index_cellline)
#'@node_attr_cellline
node_attr_cellline = GE
View(node_attr_cellline)
Fingerprints = readRDS("Processed_Data/S2/Fingerprints.rds")
View(Fingerprints)
dim(Fingerprints)
length(Fingerprints)
Fingerprints[[1]]
FP = matrix(0, length(Fingerprints), 1024)
for (i in 1:length(Fingerprints)){
FP_bits_on = Fingerprints[[i]]
FP[i,FP_bits_on@bits] = 1
}
dim(FP)
d= readRDS("All_Results/good_drugs_in_PRISM.rds")
View(d)
View(drug_sensitivity)
colnames(drug_sensitivity[d[,2]])
d[,2]
View(d)
colnames(drug_sensitivity[d[,1]])
colnames(drug_sensitivity)[d[,1]]
colnames(drug_sensitivity)
drug_sensitivity = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
colnames(drug_sensitivity)[d[,1]]
good_drugs = readRDS("All_Results/good_drugs_in_PRISM.rds")
good_drugs = readRDS("Processed_data/Other//good_drugs_in_PRISM.rds")
intersect(colnames(drug_sensitivity)[d[,1]],rownames(good_drugs))
dim(drug_sensitivity)
drug_sensitivity = drug_sensitivity[,rownames(good_drugs)]
good_drugs[,1]
View(Fingerprints)
Fingerprints[[0]]
Fingerprints[[1]]
Fingerprints = Fingerprints[[good_drugs[,1]]]
good_drugs[,1]
c(good_drugs[,1])
Fingerprints = Fingerprints[[c(good_drugs[,1])]]
e = lapply(Fingerprints,good_drugs[,1])
e = lapply(Fingerprints,Fingerprints[[good_drugs[,1]]])
good_drugs[,1]
good_drugs[1,1]
Fingerprints[[good_drugs[1,1]]]
Fingerprints_new = list()
for (i in 1:nrow(good_drugs)){
Fingerprints_new = list(Fingerprints[[good_drugs[i,1]]])
}
View(Fingerprints_new)
i
Fingerprints[[good_drugs[i,1]]]
Fingerprints_new = list()
for (i in 1:nrow(good_drugs)){
Fingerprints_new = list(Fingerprints_new,Fingerprints[[good_drugs[i,1]]])
}
View(Fingerprints_new)
View(Fingerprints)
nrow(good_drugs)
good_drugs[i,1]
i
Fingerprints[[good_drugs[i,1]]]
Fingerprints[[1,3]]
Fingerprints[[c(1,3)]]
Fingerprints[[1]]
c = list(Fingerprints[[1]],Fingerprints[[3]])
View(c)
c[[1]]
c[[2]]
Fingerprints_new = list()
i=1
Fingerprints_new = list(Fingerprints[[good_drugs[i,1]]])
Fingerprints_new
i=2
Fingerprints_new = list()
for (i in 1:nrow(good_drugs)){
Fingerprint = list(Fingerprints[[good_drugs[i,1]]])
Fingerprints_new = list(Fingerprints_new,Fingerprint)
}
View(Fingerprints_new)
f = Fingerprints[good_drugs[i,1]]
View(f)
f = Fingerprints[good_drugs[,1]]
View(f)
Fingerprints = Fingerprints[good_drugs[,1]]
Fingerprints_sim = fingerprint::fp.sim.matrix(Fingerprints, method='tanimoto')
CID_Name_Smile = readRDS("Processed_Data/S2/CID_Name_Smile.rds")
View(CID_Name_Smile)
View(Fingerprints_sim)
View(drug_sensitivity)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
library(webchem)
library(rcdk)
expr = readRDS("Processed_Data/Step1/expresion_matrix.rds")
sen = readRDS("Processed_Data/Step1/sensitivity_matrix.rds")
expr = readRDS("Processed_Data/S1/expresion_matrix.rds")
sen = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
response = read.csv("Raw_data/PRISM_Raw_data/Secondary/secondary-screen-dose-response-curve-parameters.csv")
response = read.csv("Raw_data/PRISM/Secondary/secondary-screen-dose-response-curve-parameters.csv")
#1)cell line-cell line similarity across genes
sample_sim_exp = cor(t(expr))
#2)cell line-cell line similarity across drugs
sample_sim_sen = cor(t(sen), use="complete.obs") # "use" is ignoring "NA"
## Plot cell line-cell line similarity (1) against (2)
concat_sample_sim_exp = matrix(sample_sim_exp, length(sample_sim_exp))
concat_sample_sim_sen = matrix(sample_sim_sen, length(sample_sim_sen))
#pdf(file = "Figures/Fig3_A_Sample_Sim.pdf", width = 7, height = 7)
plot(concat_sample_sim_exp, concat_sample_sim_sen, cex=.005, pch=20,
xlab = "Expresion-based similarity",
ylab = "Drug response-based similarity")
# CID_Name[1028,2] = "163838"
# CID_Name[1128,2] = "672296"
# CID_Name[1227,2] = "2210370"
# CID_Name[1381,2] = "461310"
# CID_Name[213,2] = "2724387"
# CID_Name[615,2] = "16051930"
# which(is.na(CID_Name[,2]))
#CID_Name = cbind(CID_Name[,2],CID_Name[,1])
#colnames(CID_Name) = c("CID","Name")
#saveRDS(CID_Name,"Processed_Data/Step2/CID_Name.rds")
CID_Name = readRDS("Processed_Data/S2/CID_Name.rds")
View(CID_Name)
# CID_Smile_PRISM ---------------------------------------------------------
### 2) Smiles from PRISM: It works
Smile = response$smiles
Smile = sapply(strsplit(Smile, split = ",", perl=T),
FUN = function(x){return(x[1])})
Name_Smile = cbind(Name = response$name,Smile = Smile)
Name_Smile = Name_Smile[!duplicated(Name_Smile[,1]),]
### To save CID number, Name and Smiles of drugs in a dataframe
CID_Name_Smile = merge(Name_Smile,CID_Name,by = "Name")
CID_Name_Smile = CID_Name_Smile[,c(3,1,2)]
rownames(CID_Name_Smile) = CID_Name_Smile[,2]
CID_Name_Smile = CID_Name_Smile[colnames(sen),]
### get fingerprints using "rcdk" package
Smiles =  CID_Name_Smile[,3]
molecule <- parse.smiles(Smiles)
Fingerprints = lapply(molecule, get.fingerprint, type='circular')
View(Fingerprints)
View(CID_Name_Smile)
View(sen)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
# Library -----------------------------------------------------------------
library(igraph)
# Read_Data ---------------------------------------------------------------
#GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
GE = readRDS("Processed_data/Other/GE_PRISM_CommonGeneswith_TCGA.rds")
drug_sensitivity = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
#GE = apply(GE,2, function(x){return((x-min(x))/(max(x)-min(x)))})
GE = scale(GE)
sim_GE = abs(cor(t(GE)))
## Distribution of cell line-cell line similarity matrix
hist(sim_GE,30)
thr_binarize = 0.15
abline(v =thr_binarize, col = "red")
## Binarizing the cell line-cell line similarity matrix
sim_GE[sim_GE>thr_binarize] = 1
sim_GE[sim_GE<thr_binarize] = 0
## Assign Node numbers to celllines
cellline_Node = cbind(rownames(sim_GE),c(0:(nrow(sim_GE)-1)))
rownames(sim_GE) = cellline_Node[,2]
colnames(sim_GE) = cellline_Node[,2]
## Make graph from adj to build edge_index
Graph_sample_sim = graph_from_adjacency_matrix(sim_GE,mode = "undirected",diag = FALSE)
edge_index_cellline_1 = t(as_edgelist(Graph_sample_sim, names = TRUE))
#'@edge_index_cellline
edge_index_cellline = cbind(edge_index_cellline_1,edge_index_cellline_1[c(2,1),])
#'@node_attr_cellline
node_attr_cellline = GE
Fingerprints = readRDS("Processed_Data/S2/Fingerprints.rds")
FP = matrix(0, length(Fingerprints), 1024)
for (i in 1:length(Fingerprints)){
FP_bits_on = Fingerprints[[i]]
FP[i,FP_bits_on@bits] = 1
}
View(FP)
Fingerprints = readRDS("Processed_Data/S2/Fingerprints.rds")
good_drugs = readRDS("Processed_data/Other//good_drugs_in_PRISM.rds")
Fingerprints = Fingerprints[good_drugs[,1]]
FP = matrix(0, length(Fingerprints), 1024)
for (i in 1:length(Fingerprints)){
FP_bits_on = Fingerprints[[i]]
FP[i,FP_bits_on@bits] = 1
}
View(FP)
dim(FP)
node_attr_drug = FP
drug_sensitivity = drug_sensitivity[,rownames(good_drugs)]
Fingerprints_sim = fingerprint::fp.sim.matrix(Fingerprints, method='tanimoto')
View(Fingerprints_sim)
View(Fingerprints)
View(good_drugs)
Fingerprints_sim = fingerprint::fp.sim.matrix(Fingerprints, method='tanimoto')
rownames (Fingerprints_sim) =  rownames(good_drugs)
colnames (Fingerprints_sim) =  rownames(good_drugs)
View(Fingerprints_sim)
## Distribution of drug-drug similarity matrix
sim_FP = Fingerprints_sim
hist(sim_FP,150)
thr_binarize = 0.12
abline(v = thr_binarize, col = "red")
## Binarizing the drug-drug similarity matrix
sim_FP[sim_FP>thr_binarize] = 1
sim_FP[sim_FP<thr_binarize] = 0
## Assign Node numbers to drugs
drug_Node = cbind(rownames(sim_FP), c(0:(nrow(sim_FP)-1)))
View(drug_Node)
rownames(sim_FP) = drug_Node[,2]
colnames(sim_FP) = drug_Node[,2]
View(sim_FP)
## Make graph from adj to build edge_index_drug
Graph_drug_sim = graph_from_adjacency_matrix(sim_FP,
mode = "undirected",diag = FALSE)
edge_index_drug_1 = t(as_edgelist(Graph_drug_sim, names = TRUE))
#'@edge_index_drug
edge_index_drug = cbind(edge_index_drug_1,edge_index_drug_1[c(2,1),])
View(edge_index_drug_1)
View(edge_index_drug)
#'@node_attr_drug
node_attr_drug = FP
sen = drug_sensitivity
View(cellline_Node)
rownames(sen) = cellline_Node[,2]
View(sen)
colnames(sen) = drug_Node[,2]
sen = drug_sensitivity
rownames(sen) = cellline_Node[,2]
colnames(sen) = drug_Node[,2]
#'@edge_index_cellline_drug
edge_index_cellline_drug = c()
edge_lable_cellline_drug = c()
i=1
names(which(!is.na(sen[i,])))
View(sen)
is.na(sen[i,])
!is.na(sen[i,]))
!is.na(sen[i,])
names(which(!is.na(sen[i,])))
#'@edge_index_cellline_drug
edge_index_cellline_drug = c()
edge_lable_cellline_drug = c()
for (i in 1:nrow(sen)){
ind1 = names(which(!is.na(sen[i,])))
edge_i_res = rbind(cellline = rep(i-1, length(ind1)), drug = ind1)
edge_index_cellline_drug = cbind(edge_index_cellline_drug,edge_i_res)
edge_lable_cellline_drug = c(edge_lable_cellline_drug,sen[i,ind1])
}
View(edge_index_cellline_drug)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S37_Read_Data_Multidrug_reg_New.R")
73202/2
dim(edge_index_cellline_drug)
View(edge_index_cellline_drug)
