rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
source("F10-Ridge.R")
source("F18-Combat_Normalization.R")
print(paste0("The drug number is: ", as.character(i)))
i=5
Xtrain = GE_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features, Xtrain=Xtrain, Xtest=Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
y_pred = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr = cor(ytest,y_pred)
ttest = t.test(y_pred[ytest==1], y_pred[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred[ytest==1], y_pred[ytest==2], alternative ="greater")$p.value
Ranksum
rm(list=ls())
source("F7-RandomForest.R")
source("F6-ENet.R")
source("F8-MLP.R")
source("F10-Ridge.R")
source("F11-SGL.R")
source("F13-Lasso.R")
source("F16-Zscore_Normalization.R")
source("F17-Rank_Normalization.R")
source("F18-Combat_Normalization.R")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
Cancer_type = readRDS("Processed_data/S22/Cancer_Types.rds")
Cancer_type = data.frame(Cancer_type)
N_Cancer = readRDS("Processed_data/S22/Number_of_each_Cancer_TCGA.rds")
low_sample_drugs = c(1,3,4,5,6,7,12,13,14,19,20,21,22,23,24,25,28,29,31,33,36,37
,39,40,41,42,43,45,47,49,51,52,56,57,58)
sen_PRISM = readRDS("Processed_data/S23/sensitivity_matrix_PRISM_with@TCGA@drugs.rds")
#res_TCGA = readRDS("Processed_data/S24/Drug_response_TCGA_binarized.rds")
res_TCGA = readRDS("Processed_data/S23/Drug_response_matrix_TCGA.rds")
sen_PRISM = sen_PRISM[,-low_sample_drugs]
res_TCGA = res_TCGA[,-low_sample_drugs]
GE = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE = GE[,-which(q3_genes==0)]
N_drug = ncol(sen_PRISM)
drugs = data.frame(colnames(sen_PRISM))
Results = c()
i=5
print(paste0("The drug number is: ", as.character(i)))
Xtrain = GE[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
length(ytest)
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,Xtrain = Xtrain ,Xtest = Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
ytrain
# Models
#y_pred_Ridge = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr_Ridge = cor(ytest,y_pred_Ridge)
ttest = t.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative ="greater")$p.value
Ranksum
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
i=5
print(paste0("The drug number is: ", as.character(i)))
Xtrain = GE_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
ytest
ytrain
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
low_sample_drugs = c(1,3,4,5,6,7,12,13,14,19,20,21,22,23,24,25,28,29,31,33,36,37
,39,40,41,42,43,45,47,49,51,52,56,57,58)
sen_PRISM = readRDS("Processed_data/S23/sensitivity_matrix_PRISM_with@TCGA@drugs.rds")
#res_TCGA = readRDS("Processed_data/S24/Drug_response_TCGA_binarized.rds")
res_TCGA = readRDS("Processed_data/S23/Drug_response_matrix_TCGA.rds")
sen_P = sen_PRISM[,-low_sample_drugs]
res_T = res_TCGA[,-low_sample_drugs]
GE = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_T = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_T = GE_TCGA[,-which(q3_genes==0)]
GE = GE[,-which(q3_genes==0)]
View(GE_T)
View(GE_TCGA)
View(GE_PRISM)
View(GE)
View(res_T)
View(res_TCGA)
res_TCGA
dim(res_TCGA)
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
dim(res_TCGA)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
N_drug = ncol(sen_PRISM)
drugs = data.frame(colnames(sen_PRISM))
Results = c()
i=5
print(paste0("The drug number is: ", as.character(i)))
Xtrain = GE[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
GE = GE_PRISM
Xtrain = GE[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
length(ytest)
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
source("F10-Ridge.R")
source("F18-Combat_Normalization.R")
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,Xtrain = Xtrain ,Xtest = Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
#y_pred_Ridge = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr_Ridge = cor(ytest,y_pred_Ridge)
ttest = t.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative ="greater")$p.value
Ranksum
rm(list=ls())
source("F7-RandomForest.R")
source("F6-ENet.R")
source("F8-MLP.R")
source("F10-Ridge.R")
source("F11-SGL.R")
source("F13-Lasso.R")
source("F16-Zscore_Normalization.R")
source("F17-Rank_Normalization.R")
source("F18-Combat_Normalization.R")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
Cancer_type = readRDS("Processed_data/S22/Cancer_Types.rds")
Cancer_type = data.frame(Cancer_type)
N_Cancer = readRDS("Processed_data/S22/Number_of_each_Cancer_TCGA.rds")
low_sample_drugs = c(1,3,4,5,6,7,12,13,14,19,20,21,22,23,24,25,28,29,31,33,36,37
,39,40,41,42,43,45,47,49,51,52,56,57,58)
#res_TCGA = readRDS("Processed_data/S24/Drug_response_TCGA_binarized.rds")
res_TCGA = readRDS("Processed_data/S23/Drug_response_matrix_TCGA.rds")
res_TCGA = res_TCGA[,-low_sample_drugs]
GE = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE = GE[,-which(q3_genes==0)]
N_drug = ncol(sen_PRISM)
Results = c()
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
i=5
print(paste0("The drug number is: ", as.character(i)))
Xtrain = GE[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
length(ytest)
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,Xtrain = Xtrain ,Xtest = Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
#y_pred_Ridge = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr_Ridge = cor(ytest,y_pred_Ridge)
ttest = t.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative ="greater")$p.value
Ranksum
sen_PRISM = readRDS("Processed_data/S23/sensitivity_matrix_PRISM_with@TCGA@drugs.rds")
dim(sen_PRISM)
sen_PRISM = sen_PRISM[,-low_sample_drugs]
dim(sen_PRISM)
sen_PRIS = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
View(sen_PRIS)
View(sen_PRISM)
hist(sen_PRIS)
hist(sen_PRISM)
sen_PRIS-sen_PRISM
sum(sen_PRIS-sen_PRISM)
sum(sen_PRIS-sen_PRISM, na.rm = TRUE)
rm(list=ls())
source("F7-RandomForest.R")
source("F6-ENet.R")
source("F8-MLP.R")
source("F10-Ridge.R")
source("F11-SGL.R")
source("F13-Lasso.R")
source("F16-Zscore_Normalization.R")
source("F17-Rank_Normalization.R")
source("F18-Combat_Normalization.R")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
Cancer_type = readRDS("Processed_data/S22/Cancer_Types.rds")
Cancer_type = data.frame(Cancer_type)
N_Cancer = readRDS("Processed_data/S22/Number_of_each_Cancer_TCGA.rds")
low_sample_drugs = c(1,3,4,5,6,7,12,13,14,19,20,21,22,23,24,25,28,29,31,33,36,37
,39,40,41,42,43,45,47,49,51,52,56,57,58)
#res_TCGA = readRDS("Processed_data/S24/Drug_response_TCGA_binarized.rds")
res_TCGA = readRDS("Processed_data/S23/Drug_response_matrix_TCGA.rds")
res_TCGA = res_TCGA[,-low_sample_drugs]
GE = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE = GE[,-which(q3_genes==0)]
N_drug = ncol(sen_PRISM)
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
N_drug = ncol(sen_PRISM)
drugs = data.frame(colnames(sen_PRISM))
Results = c()
i=5
print(paste0("The drug number is: ", as.character(i)))
Xtrain = GE[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
length(ytest)
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,Xtrain = Xtrain ,Xtest = Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
#y_pred_Ridge = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr_Ridge = cor(ytest,y_pred_Ridge)
ttest = t.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative ="greater")$p.value
Ranksum
rm(list=ls())
source("F7-RandomForest.R")
source("F6-ENet.R")
source("F8-MLP.R")
source("F10-Ridge.R")
source("F11-SGL.R")
source("F13-Lasso.R")
source("F16-Zscore_Normalization.R")
source("F17-Rank_Normalization.R")
source("F18-Combat_Normalization.R")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
Cancer_type = readRDS("Processed_data/S22/Cancer_Types.rds")
Cancer_type = data.frame(Cancer_type)
N_Cancer = readRDS("Processed_data/S22/Number_of_each_Cancer_TCGA.rds")
low_sample_drugs = c(1,3,4,5,6,7,12,13,14,19,20,21,22,23,24,25,28,29,31,33,36,37
,39,40,41,42,43,45,47,49,51,52,56,57,58)
sen_PRISM = readRDS("Processed_data/S23/sensitivity_matrix_PRISM_with@TCGA@drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
sen_PRISM = sen_PRISM[,-low_sample_drugs]
GE = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE = GE[,-which(q3_genes==0)]
N_drug = ncol(sen_PRISM)
drugs = data.frame(colnames(sen_PRISM))
Results = c()
i=5
print(paste0("The drug number is: ", as.character(i)))
Xtrain = GE[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
length(ytest)
if(length(ytest)>20){
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,Xtrain = Xtrain ,Xtest = Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
#y_pred_Ridge = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
#y_pred_Ridge = MLP(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
# Evaluation
corr_Ridge = cor(ytest,y_pred_Ridge)
#corr_RF = cor(ytest,y_pred_RF)
#corr_ENet = cor(ytest,y_pred_ENet)
#corr_Lasso = cor(ytest,y_pred_Lasso)
#corr_Ridge = cor(ytest , y_pred_Ridge)
#corr_Ridge = cor(ytest , y_pred_Ridge)
ttest = t.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative ="greater")$p.value
} else{
corr_Ridge = 0
ttest = 1
Ranksum = 1
}
Ranksum
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
#res_TCGA = readRDS("Processed_data/S24/Drug_response_TCGA_binarized.rds")
res_TCG = readRDS("Processed_data/S23/Drug_response_matrix_TCGA.rds")
res_TCG = res_TCG[,-low_sample_drugs]
View(res_TCG)
View(res_TCGA)
View(res_TCGA)
View(res_TCG)
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
clusterExport(cl, c("GE_PRISM","GE_TCGA","sen_PRISM","res_TCGA"))
clusterEvalQ(cl, c(source("F10-Ridge.R"), source("F18-Combat_Normalization.R")))
i=5
print(paste0("The drug number is: ", as.character(i)))
Xtrain = GE_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(Xtrain,Xtest)
Omics_List = Feature_Selection_PRISM_TCGA(selected_features, Xtrain=Xtrain, Xtest=Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
source("F10-Ridge.R")
source("F18-Combat_Normalization.R")
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features, Xtrain=Xtrain, Xtest=Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
y_pred = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr = cor(ytest,y_pred)
ttest = t.test(y_pred[ytest==1], y_pred[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred[ytest==1], y_pred[ytest==2], alternative ="greater")$p.value
Ranksum
y_pred
ytrain
ytest
y_pred
boxplot(ytest)
boxplot(ypred[ytest==1],ypred[ytest==2])
boxplot(y_pred[ytest==1],y_pred[ytest==2])
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
clusterExport(cl, c("GE_PRISM","GE_TCGA","sen_PRISM","res_TCGA"))
source("F10-Ridge.R")
source("F18-Combat_Normalization.R")
print(paste0("The drug number is: ", as.character(i)))
i=21
Xtrain = GE_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = GE_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
source("F15-Feature_Selection_PRISM@TCGA.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features, Xtrain=Xtrain, Xtest=Xtest)
Xtrain = Omics_List[[1]]
index = Omics_List[[2]]
Xtest = Omics_List[[3]]
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
y_pred = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr = cor(ytest,y_pred)
ttest = t.test(y_pred[ytest==1], y_pred[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred[ytest==1], y_pred[ytest==2], alternative ="greater")$p.value
Ranksum
boxplot(y_pred[ytest==1],y_pred[ytest==2])
boxplot(y_pred[ytest==1],y_pred[ytest==2])
