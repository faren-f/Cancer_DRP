X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
for(j in seq(10,200,by = 30)){
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
}
Intersect[i] = Intersect_i
}
Intersect
Intersect = matrix(0,ncol(sen_PRISM),7)
i=1
X_PRISM = GE_PRISM[!is.na(sen_PRISM[,i]),]
y_PRISM = sen_PRISM[!is.na(sen_PRISM[,i]),i]
X_TCGA = GE_TCGA[!is.na(res_TCGA[,i]),]
y_TCGA = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
for(j in seq(10,200,by = 30)){
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
}
Intersect_i
Intersect[i] = Intersect_i
Intersect[i,] = Intersect_i
Intersect
Intersect = matrix(0,ncol(sen_PRISM),7)
for (i in 1:2){
X_PRISM = GE_PRISM[!is.na(sen_PRISM[,i]),]
y_PRISM = sen_PRISM[!is.na(sen_PRISM[,i]),i]
X_TCGA = GE_TCGA[!is.na(res_TCGA[,i]),]
y_TCGA = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
for(j in seq(10,200,by = 30)){
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
}
Intersect[i,] = Intersect_i
}
View(Intersect)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G21-Compare_Corr_PRISM&TCGA.R")
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
source("F14-Feature_Selection.R")
source("F15-Feature_Selection_PRISM@TCGA.R")
source("F18-Combat_Normalization.R")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
Intersect = matrix(0,ncol(sen_PRISM),7)
colnames(sen_PRISM)
i= "doxorubicin"
X_PRISM = GE_PRISM[!is.na(sen_PRISM[,i]),]
y_PRISM = sen_PRISM[!is.na(sen_PRISM[,i]),i]
X_TCGA = GE_TCGA[!is.na(res_TCGA[,i]),]
y_TCGA = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
for(j in seq(10,200,by = 30)){
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
}
Intersect[i,] = Intersect_i
Intersect_i
Intersect = matrix(0,ncol(sen_PRISM),7)
for (i in colnames(sen_PRISM)){
X_PRISM = GE_PRISM[!is.na(sen_PRISM[,i]),]
y_PRISM = sen_PRISM[!is.na(sen_PRISM[,i]),i]
X_TCGA = GE_TCGA[!is.na(res_TCGA[,i]),]
y_TCGA = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
for(j in seq(10,200,by = 30)){
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
}
Intersect[i,] = Intersect_i
}
i
Intersect = matrix(0,ncol(sen_PRISM),7)
Intersect = matrix(0,ncol(sen_PRISM),7)
i
1
X_PRISM = GE_PRISM[!is.na(sen_PRISM[,i]),]
y_PRISM = sen_PRISM[!is.na(sen_PRISM[,i]),i]
X_TCGA = GE_TCGA[!is.na(res_TCGA[,i]),]
y_TCGA = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
j=50
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
Intersect_i
Intersect[i,] = Intersect_i
Intersect = matrix(0,ncol(sen_PRISM),7)
for (i in 1:ncol(sen_PRISM)){
X_PRISM = GE_PRISM[!is.na(sen_PRISM[,i]),]
y_PRISM = sen_PRISM[!is.na(sen_PRISM[,i]),i]
X_TCGA = GE_TCGA[!is.na(res_TCGA[,i]),]
y_TCGA = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
for(j in seq(10,200,by = 30)){
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
}
Intersect[i,] = Intersect_i
}
View(Intersect)
View(sen_PRISM)
seq(10,200,by = 30)
seq(10,500,by = 50)
Intersect = matrix(0,ncol(sen_PRISM),length(seq(10,500,by = 50)))
for (i in 1:ncol(sen_PRISM)){
X_PRISM = GE_PRISM[!is.na(sen_PRISM[,i]),]
y_PRISM = sen_PRISM[!is.na(sen_PRISM[,i]),i]
X_TCGA = GE_TCGA[!is.na(res_TCGA[,i]),]
y_TCGA = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(X_PRISM,X_TCGA)
X_PRISM = X_Normalization[[1]]
X_TCGA = X_Normalization[[2]]
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection_PRISM_TCGA(selected_features,
Xtrain=X_PRISM, Xtest=X_TCGA)
X_PRISM = Omics_List[[1]]
X_TCGA = Omics_List[[3]]
Corr_PRISM = cor(X_PRISM,y_PRISM)
sort_Corr_PRISM = sort(Corr_PRISM,decreasing = TRUE)[1:20]
Corr_TCGA = cor(X_TCGA,y_TCGA)
sort_Corr_TCGA = sort(Corr_TCGA,decreasing = TRUE)[1:20]
Intersect_i = c()
for(j in seq(10,500,by = 50)){
order_Corr_PRISM = order(Corr_PRISM,decreasing = TRUE)[1:j]
order_Corr_TCGA = order(Corr_TCGA,decreasing = TRUE)[1:j]
Intersect_i = c(Intersect_i, length(intersect(order_Corr_PRISM, order_Corr_TCGA)))
}
Intersect[i,] = Intersect_i
}
View(Intersect)
seq(10,500,by = 50)
rownames(Intersect) = colnames(sen_PRISM)
View(sen_PRISM)
rm(list=ls())
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
TCGA_good_drugs = c("bicalutamide", "docetaxel", "etoposide", "paclitaxel", "leucovorin",
"dacarbazine", "methotrexate", "ifosfamide", "gemcitabine",
"vincristine", "cisplatin","vinblastine")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
#sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
sen = readRDS("Processed_data/S1/sensitivity_matrix_AUC.rds")
GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
#TCGA_PRISM_drugs_all = readRDS("Processed_data/S21/Drugs_TCGA@PRISM.rds")
TCGA_PRISM_drugs_sig_samples = readRDS("Processed_data/Other/PRISM_TCGA_drugs.rds")
which(colnames(sen) %in% TCGA_PRISM_drugs_sig_samples)
I =intersect(colnames(sen),TCGA_PRISM_drugs_sig_samples)
sen = sen[,I]
source("F14-Feature_Selection.R")
selected_features = c("Landmark_genes")
Omics_List = Feature_Selection(selected_features,GE)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
Results = c()
i=16
for (i in 16){
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
# pca_PRISM = prcomp(X, scale. = T)
# pc = pca_PRISM$x
# plot(pc[,2],pc[,3])
#
# y = y/max(y)
# plot(pc[,1],pc[,2], cex = 2*y, pch = 20, col = "blue")
#
#
# rbPal <- colorRampPalette(c('red','blue'))
#
# Col <- rbPal(10)[as.numeric(cut(y,breaks = 10))]
#
# plot(pc[,2],pc[,3],pch = 20,col = Col)
#
# var(y)
#
# X = X[y<1.25,]
# y = y[y<1.25]
#X = X[y<1.5,]
#y = y[y<1.5]
# hist(sen[!is.na(sen[,i]),i])
hist(y)
# corr = abs(cor(y,X))
# d = order(corr,decreasing = TRUE)
# d[1:10]
# s = sort(corr,decreasing = TRUE)
# s[1:10]
#X = scale(X)
# Ytrain normalization
#Mean_y = mean(y)
#STD_y = sd(y)
#y = (y-Mean_y)/STD_y
clusterExport(cl, c("X","y","i","index"))
clusterEvalQ(cl, c(library(caTools),source("F7-RandomForest.R"),
source("F6-ENet.R"),source("F8-MLP.R"),source("F10-Ridge.R"),
source("F11-SGL.R"),source("F13-Lasso.R")))
RepLoop = function(j){
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Models
#y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_MLP = MLP(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
# Evaluation
#corr_SGL = cor(ytest,y_pred_SGL)
#corr_RF = cor(ytest,y_pred_RF)
#corr_ENet = cor(ytest,y_pred_ENet)
#corr_Lasso = cor(ytest,y_pred_Lasso)
corr_Ridge = cor(ytest, y_pred_Ridge, method = "pearson")
#corr_MLP = cor(ytest,y_pred_MLP)
corr_Ridge
plot(ytest, y_pred_Ridge)
result = data.frame(corr_Ridge = corr_Ridge)
#corr_SGL = corr_SGL,
#corr_RF = corr_RF,
#corr_ENet = corr_ENet,
#corr_Lasso = corr_Lasso,
#corr_MLP = corr_MLP)
return(result)
}
N_itration = 50
result = parLapply(cl, sapply(1:N_itration, list), RepLoop)
Result = data.frame()
for (k in 1:N_itration){
Result = rbind(Result, result[[k]])
}
Result_mean = apply(Result, 2, mean)
Result_sd = apply(Result, 2, sd)
print(Result_mean)
print(Result_sd)
Results = rbind(Results, c(Result_mean, Result_sd))
}
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
# X = X[y<1.25,]
# y = y[y<1.25]
#X = X[y<1.5,]
#y = y[y<1.5]
# hist(sen[!is.na(sen[,i]),i])
hist(y)
corr = abs(cor(y,X))
View(corr)
# d = order(corr,decreasing = TRUE)
# d[1:10]
s = sort(corr,decreasing = TRUE)
s[1:10]
i=5
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
# X = X[y<1.25,]
# y = y[y<1.25]
#X = X[y<1.5,]
#y = y[y<1.5]
# hist(sen[!is.na(sen[,i]),i])
hist(y)
corr = abs(cor(y,X))
# d = order(corr,decreasing = TRUE)
# d[1:10]
s = sort(corr,decreasing = TRUE)
s[1:10]
TCGA_Patients = readRDS("Processed_data/S22/TCGA_Patients.rds")
View(TCGA_Patients)
tissue_types_PRISM = unique(cellline_info$primary_tissue)
# Read Data ---------------------------------------------------------------
# PRISM tissue type
cellline_info = read.csv("Raw_data/PRISM/Secondary/secondary-screen-cell-line-info.csv")
View(cellline_info)
# Library -----------------------------------------------------------------
library('rtracklayer')
library(ggplot2)
# Read Data ---------------------------------------------------------------
cellline_info = read.csv("Raw_data/PRISM/Secondary/secondary-screen-cell-line-info.csv")
response = read.csv("Raw_data/PRISM/Secondary/secondary-screen-dose-response-curve-parameters.csv")
View(response)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G21-Compare_Corr_PRISM&TCGA.R")
View(Intersect)
View(Intersect)
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
low_sample_drugs = c(1,3,4,5,6,7,12,13,14,19,20,21,22,23,24,25,28,29,31,33,36,37
,39,40,41,42,43,45,47,49,51,52,56,57,58)
sen_PRISM = readRDS("Processed_data/S23/sensitivity_matrix_PRISM_with@TCGA@drugs.rds")
res_TCGA = readRDS("Processed_data/S24/Drug_response_TCGA_binarized.rds")
#res_TCGA = readRDS("Processed_data/S23/Drug_response_matrix_TCGA.rds")
sen_PRISM = sen_PRISM[,-low_sample_drugs]
res_TCGA = res_TCGA[,-low_sample_drugs]
GE = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE = GE[,-which(q3_genes==0)]
N_drug = ncol(sen_PRISM)
drugs = data.frame(colnames(sen_PRISM))
drugs
#saveRDS(drugs,"Processed_data/Other/24_drugs.rds")
d = 5
drug = drugs[d,1]
i=5
print(paste0("The level number is: ", as.character(i)))
#Drug Pathway feature selection
source("F22-Drug_Pathway_Level_genes_eachTarget.R")
pathway_gene_set = Drug_Pathway_gene_set_eachTarget(drug = drug, level=i)
View(pathway_gene_set)
names(pathway_gene_set)
j="TOP2A"
!is.null(pathway_gene_set[[j]])
I = intersect(colnames(GE),pathway_gene_set[[j]])
X = GE[,I]
X_TCGA = GE_TCGA[,I]
!is.null(ncol(X))
index = rep(1,ncol(X))
##################
#X = GE
#X_TCGA = GE_TCGA
Xtrain = X[!is.na(sen_PRISM[,d]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,d]),d]
Xtest = X_TCGA[!is.na(res_TCGA[,d]),]
ytest = res_TCGA[!is.na(res_TCGA[,d]),d]
length(ytest)
length(ytest)>10
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
source("F18-Combat_Normalization.R")
source("F10-Ridge.R")
#X_Normalization = Rank(Xtrain,Xtest)
#X_Normalization = Rank(Xtrain,Xtest)
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
N_genes = ncol(Xtrain)
# Models
#y_pred_Ridge = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_Ridge = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Ridge = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Ridge = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr_Ridge = cor(ytest,y_pred_Ridge)
ttest = t.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred_Ridge[ytest==1], y_pred_Ridge[ytest==2], alternative ="greater")$p.value
Ranksum
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen_PRISM = readRDS("Processed_data/Other/Sen_PRISM_24_Drugs.rds")
res_TCGA = readRDS("Processed_data/Other/Res_TCGA_24_Drugs.rds")
GE_PRISM = readRDS("Processed_data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE_TCGA = readRDS("Processed_data/S23/expresion_matrix_TCGA.rds")
# Remove genes whose Q3 is zero
q3_genes = apply(GE_TCGA,2,quantile,prob=0.75)
GE_TCGA = GE_TCGA[,-which(q3_genes==0)]
GE_PRISM = GE_PRISM[,-which(q3_genes==0)]
drugs = colnames(sen_PRISM)
i=5
print(paste0("The drug is: ", as.character(i)))
drugs
i="etoposide"
print(paste0("The drug is: ", as.character(i)))
#Drug Pathway feature selection
Result_Level = list()
j=5
source("F22-Drug_Pathway_Level_genes_eachTarget.R")
pathway_gene_set = Drug_Pathway_gene_set_eachTarget(drug = i, level=j)
!isEmpty(pathway_gene_set)
Result = c()
names(pathway_gene_set)
k = "TOP2A"
!is.null(pathway_gene_set[[k]])
I = intersect(colnames(GE_PRISM),pathway_gene_set[[k]])
X_PRISM = GE_PRISM[,I]
X_TCGA = GE_TCGA[,I]
!is.null(ncol(X_PRISM))
Xtrain = X_PRISM[!is.na(sen_PRISM[,i]),]
ytrain = sen_PRISM[!is.na(sen_PRISM[,i]),i]
Xtest = X_TCGA[!is.na(res_TCGA[,i]),]
ytest = res_TCGA[!is.na(res_TCGA[,i]),i]
X_Normalization = Combat_Scale(Xtrain,Xtest)
source("F18-Combat_Normalization.R")
source("F10-Ridge.R")
X_Normalization = Combat_Scale(Xtrain,Xtest)
Xtrain = X_Normalization[[1]]
Xtest = X_Normalization[[2]]
N_genes = ncol(Xtrain)
# Ytrain normalization
ytrain = scale(ytrain)
ytrain = ytrain[,1]
# Models
y_pred = Ridge(ytrain = ytrain ,Xtrain = Xtrain, Xtest = Xtest)
# Evaluation
corr = cor(ytest,y_pred)
ttest = t.test(y_pred[ytest==1], y_pred[ytest==2], alternative="greater")$p.value
Ranksum = wilcox.test(y_pred[ytest==1], y_pred[ytest==2], alternative ="greater")$p.value
Ranksum
Result = rbind(Result, cbind(corr, ttest, Ranksum, N_genes))
View(Result)
drugs[5]
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF6-PW_EachTarget_PRISM@TCGA.R")
View(Result_Drug)
Result_Drug[["etoposide"]]
source("~/Desktop/Cancer_DRP/R/Prepare_Data/RF6-PW_EachTarget_PRISM@TCGA.R")
