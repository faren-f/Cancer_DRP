else
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,4]
}
View(X_tf)
i
j
X_tf[X_tf$condition == i & X_tf$source == j,5]
X_tf = data.frame(X_tf)
X_TF = matrix(0,length(unique(X_tf$condition)), length(unique(X_tf$source)))
rownames(X_TF) = unique(X_tf$condition)
colnames(X_TF) = unique(X_tf$source)
for (i in rownames(X_TF)){
for (j in colnames(X_TF))
if(method == "consensus")
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,5]
else
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,4]
}
X_tf[X_tf$condition == i & X_tf$source == j,5]
dim(X_TF)
View(X_TF)
View(X_tf)
rownames(X_TF)
unique(X_tf$condition)
unique(X_tf$source)
X_tf = data.frame(X_tf)
X_TF = matrix(0,length(unique(X_tf$condition)), length(unique(X_tf$source)))
rownames(X_TF) = unique(X_tf$condition)
colnames(X_TF) = unique(X_tf$source)
dim(X_TF)
rownames(X_TF)
i="ACH-001075"
colnames(X_TF)
j = "ZNF197"
i
j
method == "consensus"
X_tf[X_tf$condition == i & X_tf$source == j,5]
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,5]
X_TF[i,j]
View(X_TF)
X_tf = data.frame(X_tf)
X_TF = matrix(0,length(unique(X_tf$condition)), length(unique(X_tf$source)))
rownames(X_TF) = unique(X_tf$condition)
colnames(X_TF) = unique(X_tf$source)
for (i in rownames(X_TF)){
for (j in colnames(X_TF)){
if(method == "consensus"){
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,5]
}else{
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,4]
}
}
}
View(X_tf)
class(v)
class(X_tf)
View(X_tf)
View(X_TF)
View(X_tf)
X_tf = data.frame(X_tf)
X_TF = matrix(0,length(unique(X_tf$condition)), length(unique(X_tf$source)))
rownames(X_TF) = unique(X_tf$condition)
colnames(X_TF) = unique(X_tf$source)
for (i in rownames(X_TF)){
for (j in colnames(X_TF)){
if(method == "consensus"){
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,5]
}else{
X_TF[i,j] = X_tf[X_tf$condition == i & X_tf$source == j,4]
}
}
}
View(X_TF)
sen = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
# L1000
l1000_genes = readRDS("Processed_Data/S18/Landmark_genes.rds")
O1 = GE[,colnames(GE)%in%l1000_genes]
# TF
O2 = DoRothEA(X = GE)
# dR
#TF_dR = decoupleR(X = GE, method = "gsva")
O4 = X_TF
dim(O2)
X = GE
dim(X)
X = t(X)
dim(X)
data("dorothea_hs_pancancer", package = "dorothea")
TF = dorothea::run_viper(X, dorothea_hs_pancancer, options =  list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
dim(TF)
TF = t(TF)
dim(TF)
source("F4-DoRothEA.R")
# TF
O2 = DoRothEA(X = GE)
dim(O2)
# concatenate all omics data
#omics = cbind(O1,O2,O3)
omics = cbind(O1,O2,O4)
#index = c(rep(1,ncol(O1)),rep(2,ncol(O2)),rep(3,ncol(O3)))
index = c(rep(1,ncol(O1)),rep(2,ncol(O2)),rep(2,ncol(O4)))
i = 1399
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
clusterExport(cl, c("X","y","i","index"))
no_cores = detectCores()
cl = makeCluster(no_cores-2)
library(parallel)
clusterExport(cl, c("X","y","i","index"))
clusterEvalQ(cl, c(library(caTools),source("F7-RandomForest.R"),
library(SGL)))
RepLoop = function(j){
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Normalization-------------------------------------------------------------
#Xtrain normalization
Mean_X = apply(Xtrain,2,mean)
STD_X = apply(Xtrain,2,sd)
Xtrain = (Xtrain-Mean_X)/STD_X
# Xtest normalization
Xtest = (Xtest-Mean_X)/STD_X
#for when we have tissue types
# Mean_X = apply(Xtrain[,1:2254],2,mean)
# STD_X = apply(Xtrain[,1:2254],2,sd)
# Xtrain_1 = (Xtrain[,1:2254]-Mean_X)/STD_X
# Xtrain = cbind(Xtrain_1,Xtrain[,2255:ncol(Xtrain)])
# # Xtest normalization
# Xtest_1 = (Xtest[,1:2254]-Mean_X)/STD_X
# Xtest = cbind(Xtest_1,Xtest[2255:ncol(Xtest)])
# Ytrain normalization
# Mean_y = mean(ytrain)
# STD_y = sd(ytrain)
# ytrain_norm = (ytrain-Mean_y)/STD_y
# Models
y_pred_SGL = SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
corr_SGL = cor(ytest,y_pred_SGL)
corr_RF = cor(ytest,y_pred_RF)
result = data.frame(corr_SGL = corr_SGL, corr_RF = corr_RF)
return(result)
}
N_itration = 6
result = parLapply(cl, sapply(1:N_itration, list), RepLoop)
source("F11-SGL.R")
RepLoop = function(j){
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Normalization-------------------------------------------------------------
#Xtrain normalization
Mean_X = apply(Xtrain,2,mean)
STD_X = apply(Xtrain,2,sd)
Xtrain = (Xtrain-Mean_X)/STD_X
# Xtest normalization
Xtest = (Xtest-Mean_X)/STD_X
#for when we have tissue types
# Mean_X = apply(Xtrain[,1:2254],2,mean)
# STD_X = apply(Xtrain[,1:2254],2,sd)
# Xtrain_1 = (Xtrain[,1:2254]-Mean_X)/STD_X
# Xtrain = cbind(Xtrain_1,Xtrain[,2255:ncol(Xtrain)])
# # Xtest normalization
# Xtest_1 = (Xtest[,1:2254]-Mean_X)/STD_X
# Xtest = cbind(Xtest_1,Xtest[2255:ncol(Xtest)])
# Ytrain normalization
# Mean_y = mean(ytrain)
# STD_y = sd(ytrain)
# ytrain_norm = (ytrain-Mean_y)/STD_y
# Models
y_pred_SGL = SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
corr_SGL = cor(ytest,y_pred_SGL)
corr_RF = cor(ytest,y_pred_RF)
result = data.frame(corr_SGL = corr_SGL, corr_RF = corr_RF)
return(result)
}
N_itration = 6
result = parLapply(cl, sapply(1:N_itration, list), RepLoop)
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Normalization-------------------------------------------------------------
#Xtrain normalization
Mean_X = apply(Xtrain,2,mean)
STD_X = apply(Xtrain,2,sd)
Xtrain = (Xtrain-Mean_X)/STD_X
# Xtest normalization
Xtest = (Xtest-Mean_X)/STD_X
# Models
y_pred_SGL = SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
# Models
y_pred_SGL = SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
source("F11-SGL.R")
# Models
y_pred_SGL = SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
data = list(x=Xtrain, y = ytrain)
cvfit = cvSGL(data, index, type = "linear",maxit = 10)
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
fit = SGL(data, index, type = "linear",maxit = 10, lambdas = c(lambda_opt,0))
lambdas
c(lambda_opt,0)
index
fit = SGL(data, index, type = "linear",maxit = 10, lambdas = c(lambda_opt,0))
fit = SGL(data, index, type = "linear",maxit = 10, lambdas = c(lambda_opt,0))
data = list(x=Xtrain, y = ytrain)
lambda_opt
fit = SGL(data, index, type = "linear",maxit = 10, lambdas = c(lambda_opt,0))
lambdas = c(lambda_opt,0)
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
clusterExport(cl, c("X","y","i","index"))
clusterEvalQ(cl, c(library(caTools),source("F7-RandomForest.R"),
source("F11-SGL.R")))
RepLoop = function(j){
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Normalization-------------------------------------------------------------
#Xtrain normalization
Mean_X = apply(Xtrain,2,mean)
STD_X = apply(Xtrain,2,sd)
Xtrain = (Xtrain-Mean_X)/STD_X
# Xtest normalization
Xtest = (Xtest-Mean_X)/STD_X
#for when we have tissue types
# Mean_X = apply(Xtrain[,1:2254],2,mean)
# STD_X = apply(Xtrain[,1:2254],2,sd)
# Xtrain_1 = (Xtrain[,1:2254]-Mean_X)/STD_X
# Xtrain = cbind(Xtrain_1,Xtrain[,2255:ncol(Xtrain)])
# # Xtest normalization
# Xtest_1 = (Xtest[,1:2254]-Mean_X)/STD_X
# Xtest = cbind(Xtest_1,Xtest[2255:ncol(Xtest)])
# Ytrain normalization
# Mean_y = mean(ytrain)
# STD_y = sd(ytrain)
# ytrain_norm = (ytrain-Mean_y)/STD_y
# Models
y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
corr_SGL = cor(ytest,y_pred_SGL)
corr_RF = cor(ytest,y_pred_RF)
result = data.frame(corr_SGL = corr_SGL, corr_RF = corr_RF)
return(result)
}
N_itration = 6
result = parLapply(cl, sapply(1:N_itration, list), RepLoop)
Result = data.frame()
for (k in 1:N_itration){
Result = rbind(Result, result[[k]])
}
r = c(mean(Result$corr_SGL), mean(Result$corr_RF))
print(r)
Drug_Targets = readRDS("Processed_data/S1/drug_targets.rds")
rm(list=ls())
Drug_Targets = readRDS("Processed_data/S1/drug_targets.rds")
View(Drug_Targets)
sen = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
View(sen)
nrow(Drug_Targets)
rownames(Drug_Targets) = Drug_Targets$name
source("~/Desktop/Cancer_DRP/R/Prepare_Data/F12-Drug_Targets.R")
Drug_Targets = readRDS("Processed_data/S1/drug_targets.rds")
Drug_Targets = function(Drug_Targets,X){
rownames(Drug_Targets) = Drug_Targets$name
DTs = list()
for(i in rownames(Drug_Targets)){
drug_targets_i = strsplit(drug_targets[i,2],", ")
DT = intersect(colnames(X),drug_targets_i[[1]])
if (length(DT)<1){
DTs[[i]]= NULL
next
}
DTs[[i]]= DT
}
#GE_DT = GE[, c(DT, DT[1])]
return(DTs)
}
Drug_Targets = readRDS("Processed_data/S1/drug_targets.rds")
X = GE
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
X = GE
rownames(Drug_Targets) = Drug_Targets$name
DTs = list()
for(i in rownames(Drug_Targets)){
drug_targets_i = strsplit(drug_targets[i,2],", ")
DT = intersect(colnames(X),drug_targets_i[[1]])
if (length(DT)<1){
DTs[[i]]= NULL
next
}
DTs[[i]]= DT
}
DTs = list()
for(i in rownames(Drug_Targets)){
Drug_Targets_i = strsplit(Drug_Targets[i,2],", ")
DT = intersect(colnames(X),Drug_Targets_i[[1]])
if (length(DT)<1){
DTs[[i]]= NULL
next
}
DTs[[i]]= DT
}
View(DTs)
View(Drug_Targets)
length(DT)
i= "sulfamethazine"
Drug_Targets_i = strsplit(Drug_Targets[i,2],", ")
Drug_Targets_i
DT = intersect(colnames(X),Drug_Targets_i[[1]])
DT
length(DT)<1
DTs[[i]]= NULL
DTs[[i]]
i
DTs[[i]]
i="epinastine"
Drug_Targets_i = strsplit(Drug_Targets[i,2],", ")
DT = intersect(colnames(X),Drug_Targets_i[[1]])
Drug_Targets_i
DT
(length(DT)<1)
DTs[[i]]
i
DT
DTs = list()
for(i in rownames(Drug_Targets)){
Drug_Targets_i = strsplit(Drug_Targets[i,2],", ")
DT = intersect(colnames(X),Drug_Targets_i[[1]])
if (length(DT)<1){
DTs[[i]]= 0
next
}
DTs[[i]]= DT
}
View(DTs)
DTs = list()
for(i in rownames(Drug_Targets)){
Drug_Targets_i = strsplit(Drug_Targets[i,2],", ")
DT = intersect(colnames(X),Drug_Targets_i[[1]])
if (length(DT)<1){
DTs[[i]]= NA
next
}
DTs[[i]]= DT
}
View(DTs)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
source("F12-Drug_Targets.R")
# Drug target
O5 = Drug_Targets(X= GE)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
source("F12-Drug_Targets.R")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
# Drug target
O5 = Drug_Targets(X= GE)
View(O5)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
source("F12-Drug_Targets.R")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
# Drug target
DTs = Drug_Targets(X= GE)
View(DTs)
View(DTs)
i=1
DTs[[i]]
source("~/Desktop/Cancer_DRP/R/Prepare_Data/F0-GF_Single_View.R")
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
source("F4-DoRothEA.R")
source("F9-decoupleR.R")
#source("F9-decoupleR.R")
source("F12-Drug_Targets.R")
res_drugs = readRDS("Processed_data/S0/Result_All_Drugs.rds")
order_drugs = data.frame(order = order(res_drugs[,3],decreasing = TRUE))
sen = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
# L1000
l1000_genes = readRDS("Processed_Data/S18/Landmark_genes.rds")
O1 = GE[,colnames(GE)%in%l1000_genes]
# Transcription Factors
O2 = DoRothEA(X = GE)
# Tissue types
O3 = readRDS("Processed_data/S19/sample_tissue_types.rds")
i = 1399
# Drug target
DTs = Drug_Targets(X= GE)
#GE_DT = GE[, c(DT, DT[1])]   # when we want to consider only drug targets as features
O5 = GE[, DTs[[i]]]
# concatenate all omics data
omics = cbind(O1,O2,O5)
dim(omics)
index = c(rep(1,ncol(O1)),rep(2,ncol(O2)),rep(2,ncol(O5)))
index = c(rep(1,ncol(O1)),rep(2,ncol(O2)),rep(3,ncol(O5)))
rep(1,ncol(O1))
rep(2,ncol(O2))
rep(3,ncol(O5))
ncol(O5)
View(DTs)
View(res_drugs)
View(order_drugs)
i = 1020
# Drug target
DTs = Drug_Targets(X= GE)
#GE_DT = GE[, c(DT, DT[1])]   # when we want to consider only drug targets as features
O5 = GE[, DTs[[i]]]
DTs
DTs[[i]]
i = 299
# Drug target
DTs = Drug_Targets(X= GE)
DTs[[i]]
source("~/Desktop/Cancer_DRP/R/Prepare_Data/F0-GF_Single_View.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/F0-GF_Single_View.R")
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
source("F4-DoRothEA.R")
#source("F9-decoupleR.R")
source("F12-Drug_Targets.R")
library(parallel)
no_cores = detectCores()
res_drugs = readRDS("Processed_data/S0/Result_All_Drugs.rds")
order_drugs = data.frame(order = order(res_drugs[,3],decreasing = TRUE))
sen = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
# L1000
l1000_genes = readRDS("Processed_Data/S18/Landmark_genes.rds")
O1 = GE[,colnames(GE)%in%l1000_genes]
# Transcription Factors
O2 = DoRothEA(X = GE)
# Tissue types
O3 = readRDS("Processed_data/S19/sample_tissue_types.rds")
i = 299
# Drug target
DTs = Drug_Targets(X= GE)
#GE_DT = GE[, c(DT, DT[1])]   # when we want to consider only drug targets as features
O5 = GE[, DTs[[i]]]
# concatenate all omics data
omics = cbind(O1,O2,O5)
index = c(rep(1,ncol(O1)),rep(2,ncol(O2)),rep(3,ncol(O5)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
library(caTools)
source("F7-RandomForest.R")
library(keras)
library(tensorflow)
source("F8-MLP.R")
source("F10-Ridge.R")
source("My_SGL")
source("My_SGL.R")
source("SGL.R")
source("F11-SGL.R")
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Normalization-------------------------------------------------------------
#Xtrain normalization
Mean_X = apply(Xtrain,2,mean)
STD_X = apply(Xtrain,2,sd)
Xtrain = (Xtrain-Mean_X)/STD_X
# Xtest normalization
Xtest = (Xtest-Mean_X)/STD_X
# Ytrain normalization
Mean_y = mean(ytrain)
STD_y = sd(ytrain)
ytrain_norm = (ytrain-Mean_y)/STD_y
# Models
y_pred_SGL = My_SGL(ytrain = ytrain_norm ,Xtrain = Xtrain,Xtest = Xtest,index = index)
y_pred_RF = RandomForest(ytrain = ytrain_norm ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ENet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_MLP = MLP(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_SGL = (y_pred_SGL*STD_y)+Mean_y
y_pred_RF = (y_pred_RF*STD_y)+Mean_y
#y_pred_ENet = (y_pred_ENet*STD_y)+Mean_y
#y_pred_Lasso = (y_pred_Lasso*STD_y)+Mean_y
#y_pred_Ridge = (y_pred_Ridge*STD_y)+Mean_y
y_pred_MLP = (y_pred_MLP*STD_y)+Mean_y
# Evaluation
corr_SGL = cor(ytest,y_pred_SGL)
corr_RF = cor(ytest,y_pred_RF)
#corr_ENet = cor(ytest,y_pred_ENet)
#corr_Lasso = cor(ytest,y_pred_Lasso)
#corr_Ridge = cor(ytest,y_pred_Ridge)
corr_MLP = cor(ytest,y_pred_MLP)
corr_SGL
corr_RF
corr_MLP
source("~/Desktop/Cancer_DRP/R/Prepare_Data/F0-GF_Single_View.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/F0-GF_Single_View.R")
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
source("F4-DoRothEA.R")
rm(list=ls())
