library(igraph)
install.packages("igraph")
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
BiocManager::install("igraph")
rm(list=ls())
library(SGL)
source("F4-DoRothEA.R")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
rm(list=ls())
library(SGL)
source("F4-DoRothEA.R")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("Processed_Data/S1/sensitivity_matrix.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
# L1000
l1000_genes = readRDS("Processed_Data/S18/Landmark_genes.rds")
O1 = GE[,colnames(GE)%in%l1000_genes]
# TF
TF_Do = DoRothEA(X = GE)
O2 = t(TF_Do)
#Tissue types
sample_tissue_types = readRDS("Processed_data/S19/sample_tissue_types.rds")
O3 = sample_tissue_types
# concatenate all omics data
omics = cbind(O1,O2,O3)
index = c(rep(1,ncol(O1)),rep(2,ncol(O2)),rep(3,ncol(O3)))
i = 1253
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
sample = sample.split(y, SplitRatio = .9)
Xtrain = subset(X, sample == TRUE)
library(caTools)
sample = sample.split(y, SplitRatio = .9)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
data = list(x=Xtrain, y = ytrain)
cvFit = cvSGL(data, index, type = "linear",maxit = 1)
View(cvFit)
fit = SGL(data, index, type = "linear", maxit = 10, thresh = 0.001,
min.frac = 0.1, nlam = 20, gamma = 0.8, standardize = TRUE,
verbose = FALSE, step = 1, reset = 10, alpha = 0.95, lambdas = NULL)
cvFit = cvSGL(data, index, type = "linear",maxit = 10)
View(cvFit)
cvFit[["lambdas"]]
predictSGL(x = cvFit, Xtest)
predictSGL(cvFit, Xtest)
fit = SGL(data, index, type = "linear", maxit = 10, thresh = 0.001,
min.frac = 0.1, nlam = 20, gamma = 0.8, standardize = TRUE,
verbose = FALSE, step = 1, reset = 10, alpha = 0.95, lambdas = NULL)
predictSGL(cvFit, Xtest)
View(cvFit)
cvFit$lambdas
cvFit$fit$lambdas
cvFit$lldiff
cvFit[["lldiff"]]
which.min(cvFit[["lldiff"]])
predictSGL(cvFit, Xtest,which.min(cvFit[["lldiff"]]))
?predictSGL
which.min(cvFit[["lldiff"]])
predictSGL(cvFit, Xtest, which.min(cvFit[["lldiff"]]))
predictSGL(cvFit, Xtest,5)
predictSGL(cvFit$fit, Xtest,5)
class(cvFit)
predictSGL(fit, Xtest,5)
fit = SGL(data, index, type = "linear",maxit = 10)
View(fit)
fit[["beta"]]
fit[["lambdas"]]
fit[["lambdas"]]
predictSGL(fit, Xtest,5)
cvfit = cvSGL(data, index, type = "linear",maxit = 10)
which.min(cvfit$lldiff)
lambda = which.min(cvfit$lldiff)
cvfit$lldiff
i_lambda_opt = which.min(cvfit$lldiff)
cvfit$lambdas[i_lambda_opt]
fit = SGL(data, index, type = "linear",maxit = 100, lambdas = lambda_opt)
lambda_opt = cvfit$lambdas[i_lambda_opt]
fit = SGL(data, index, type = "linear",maxit = 100, lambdas = lambda_opt)
View(fit)
fit[["lambdas"]]
y_pred = predictSGL(fit, Xtest,1)
y_pred = predictSGL(fit, Xtest)
class(fit$lambdas)
which(fit$lambdas)
fit = SGL(data, index, type = "linear",maxit = 100, lambdas = c(lambda_opt,0))
y_pred = predictSGL(fit, Xtest, 1)
y_pred
corr_RF = cor(ytest,y_pred)
corr_RF
View(cvFit)
View(fit)
fit[["beta"]]
b = data.frame(fit$beta)
View(b)
plot(b$X1)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S20-SGL.R")
View(Result)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S20-SGL.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S20-SGL.R")
View(Result)
View(result)
View(Result)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S20-SGL.R")
result
N_itration
Result
result
