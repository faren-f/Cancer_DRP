cor(ytest,y_pred_SGL)
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
source("H1-Feature_Selection.R")
selected_features = c("TF_DoRothEA")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
omics = TF
N_drug = ncol(sen)
Results = c()
i=11
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
Mean_X = apply(X,2,mean)
STD_X = apply(X,2,sd)
X = (X-Mean_X)/STD_X
# Ytrain normalization
Mean_y = mean(y)
STD_y = sd(y)
y = (y-Mean_y)/STD_y
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
source("H1-Feature_Selection.R")
selected_features = c("TF_DoRothEA")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
Results = c()
i=11
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
Mean_X = apply(X,2,mean)
STD_X = apply(X,2,sd)
X = (X-Mean_X)/STD_X
# Ytrain normalization
Mean_y = mean(y)
STD_y = sd(y)
y = (y-Mean_y)/STD_y
library(caTools)
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
data = list(x=Xtrain, y = ytrain)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 3,
lambdas = seq(.00001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
source("F10-Ridge.R")
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
cor(ytest,y_pred_Ridge)
seq(.000001,.01,.0001)
seq(.000001,.001,.00001)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 3,
lambdas = seq(.000001,.001,.00001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 3))
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 3)
# lambdas = seq(.000001,.001,.00001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
seq(.00001,.01,.0001)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
data = list(x=Xtrain, y = ytrain)
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
data = list(x=Xtrain, y = ytrain)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 5,
lambdas = seq(.00001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
plot(cvfit$lldiff)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
data = list(x=Xtrain, y = ytrain)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 5,
lambdas = seq(.00001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
plot(cvfit$lldiff)
seq(.0001,.01,.0001)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 5,
lambdas = seq(.0001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
source("F10-Ridge.R")
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
cor(ytest,y_pred_Ridge)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
source("H1-Feature_Selection.R")
selected_features = c("TF_DoRothEA")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
Results = c()
i=13
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
Mean_X = apply(X,2,mean)
STD_X = apply(X,2,sd)
X = (X-Mean_X)/STD_X
# Ytrain normalization
Mean_y = mean(y)
STD_y = sd(y)
y = (y-Mean_y)/STD_y
library(caTools)
source("F7-RandomForest.R")
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
data = list(x=Xtrain, y = ytrain)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 5)
#lambdas = seq(.0001,.01,.0001)
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
source("F10-Ridge.R")
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
cor(ytest,y_pred_Ridge)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 5,
lambdas = seq(.0001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
cvfit = cvSGL(data, index, type = "linear", maxit = 10, nlam = 100, nfold = 5,
lambdas = seq(.0001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
seq(.00001,.01,.001)
seq(.00001,.01,.0001)
length(seq(.00001,.01,.0001))
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
https://github.com/jlaria/sglfast
install_github("jlaria/sglfast")
library(devtools)
library(devtools)
install_github("jlaria/sglfast")
library(sglfast)
?isgl
data = list(x=Xtrain, y = ytrain)
TT = readRDS("Processed_data/S19/sample_tissue_types.rds")
S = c()
for(t in 1:ncol(TT)){
S = c(S,sum(TT[,t]==1))
}
S
order(S)
order(S,decreasing = TRUE)
sort(S,decreasing = TRUE)
S = c()
for(t in 1:ncol(TT)){
S = c(S,sum(TT[,t]==1))
}
S
S = apply(TT,2,sum)
S
sort(S,decreasing = TRUE)
S = sort(S,decreasing = TRUE)
S<12
sum(S[S<12]]
sum(S[S<12])
sum(S[S<14])
S
sum(S<14)
TT1 = TT[,1:14]
View(TT1)
class(TT1)
ncol(TT)
sum(S<14)
TT2 = apply(TT[,15:ncol(TT)],1,sum)
TT2
S = apply(TT,2,sum)
S = sort(S,decreasing = TRUE)
sum(S[S<14])
sum(S<14)
TT_other = apply(TT[,15:ncol(TT)],1,sum)
sum(TT_other)
sum(S<14)
e = TT[,15:ncol(TT)]
dim(e)
View(e)
sum(S[S<14])
S
sum(S[S<14])
sum(S<14)
View(TT)
S = apply(TT,2,sum)
S
#S = sort(S,decreasing = TRUE)
sum(S[S<14])
sum(S<14)
which(S(S<14))
which(S<14)
I = which(S<14)
TT_other = apply(TT[,I],1,sum)
TT_other
sum(TT[,15:ncol(TT)])
I
TT_other = apply(TT[,I],1,sum)
sum(TT_other)
TT = cbind(TT[,-I],TT_other)
View(TT)
dim(TT)
S = apply(TT,2,sum)
sum(S[S<14])
S = apply(TT,2,sum)
TT = readRDS("Processed_data/S19/sample_tissue_types.rds")
S = apply(TT,2,sum)
sort(S)
I = which(S<14)
I
apply(TT[,I],1,sum)
TT_other
TT_other = apply(TT[,I],1,sum)
TT_other
TT = cbind(TT[,-I],TT_other)
View(TT)
Other = apply(TT[,I],1,sum)
TT = readRDS("Processed_data/S19/sample_tissue_types.rds")
S = apply(TT,2,sum)
sum(S[S<14])
I = which(S<14)
Other = apply(TT[,I],1,sum)
TT = cbind(TT[,-I],Other)
seq(.00001,.01,.0001)
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
TT = readRDS("Processed_data/S19/sample_tissue_types.rds")
TF = readRDS("Processed_data/S14/DoRothEA_TF.rds")
S = apply(TT,2,sum)
sum(S[S<14])
I = which(S<14)
Other = apply(TT[,I],1,sum)
TT = cbind(TT[,-I],Other)
tf = matrix(0, nrow(TF),ncol(TF)*ncol(TT))
rownames(tf) = rownames(TF)
colnames(tf) = rep(colnames(TF),each = ncol(TT))
index = rep(c(1:ncol(TF)),each = ncol(TT))
k=0
for (i in 1:ncol(TF)){
for (j in 1:ncol(TT)){
tf[,k+j] = ifelse(TT[,j]==1, TF[,i], 0)
}
k = i*ncol(TT)
}
omics = tf
colnames(omics) = 1:ncol(omics)
Results = c()
i=17
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
library(caTools)
source("F11-SGL.R")
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Models
y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
cor(ytest,y_pred_SGL)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S19-Read_Tissue_Types.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S19-Read_Tissue_Types.R")
TT = readRDS("Processed_data/S19/sample_tissue_types_other.rds")
dim(TT)
View(TT)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/TF_Tissue_Specific.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/TF_Tissue_Specific.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
TT = readRDS("Processed_data/S19/sample_tissue_types_other.rds")
TF = readRDS("Processed_data/S14/DoRothEA_TF.rds")
tf = matrix(0, nrow(TF),ncol(TF)*ncol(TT))
rownames(tf) = rownames(TF)
colnames(tf) = rep(colnames(TF),each = ncol(TT))
index = rep(c(1:ncol(TF)),each = ncol(TT))
k=0
for (i in 1:ncol(TF)){
for (j in 1:ncol(TT)){
tf[,k+j] = ifelse(TT[,j]==1, TF[,i], 0)
}
k = i*ncol(TT)
}
omics = tf
colnames(omics) = 1:ncol(omics)
Results = c()
i=15
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
library(caTools)
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
data = list(x=Xtrain, y = ytrain)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 5,
lambdas = seq(.00001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
lambda_opt= 0.001
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
lambda_opt= 0.00001
fit = SGL(data, index, type = "linear", maxit = 10, lambdas = c(lambda_opt,0))
y_pred_SGL = predictSGL(fit, Xtest, 1)
cor(ytest,y_pred_SGL)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/H2-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/TF_Tissue_Specific.R")
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
data = list(x=Xtrain, y = ytrain)
cvfit = cvSGL(data, index, type = "linear", maxit = 5, nlam = 100, nfold = 5,
lambdas = seq(.00001,.01,.0001))
i_lambda_opt = which.min(cvfit$lldiff)
lambda_opt = cvfit$lambdas[i_lambda_opt]
lambda_opt
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
readRDS("Raw_data/TCGA/gdac.broadinstitute.org_OV.Clinical_Pick_Tier1.Level_4.2016012800.0.0/OV.clin.merged.picked.txt")
T = readRDS("Raw_data/TCGA/gdac.broadinstitute.org_OV.Clinical_Pick_Tier1.Level_4.2016012800.0.0/OV.clin.merged.picked.txt")
T = readRDS("Raw_data/TCGA/OV.clin.merged.picked.txt")
T = read.table("Raw_data/TCGA/OV.clin.merged.picked.txt")
T = read.table("Raw_data/TCGA/OV.clin.merged.picked.txt",sep = "/t")
TCGA = read.table("Raw_data/TCGA/OV.clin.merged.picked.txt",
header = TRUE, check.names = FALSE)
TCGA = read.table("Raw_data/TCGA/OV.clin.merged.picked.txt",
header = FALSE, check.names = FALSE)
TCGA = read.table("Raw_data/TCGA/OV.clin.merged.picked.txt",
header = FALSE, row.names = FALSE,check.names = FALSE)
TCGA = read.table("Raw_data/TCGA/OV.clin.merged.picked.txt",
header = FALSE)
TCGA = read.table("Raw_data/TCGA/OV.clin.merged.picked.txt",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/stage3_params_clin_selection_OV.tsv",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/All_CDEs.txt",
header = FALSE, fill = TRUE)
View(TCGA)
d = data.frame(TCGA[45,])
View(d)
d = t(d)
!is.na(d)
sum(!is.na(d))
d = t(data.frame(TCGA[27,]))
View(d)
sum(!is.na(d))
TCGA = read.table("Raw_data/TCGA/MANIFEST.txt",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Clinical_Pick/22232223_stderr.txt",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Clinical_Pick/22232223_stdout.txt",
header = FALSE, fill = TRUE)
View(TCGA)
dim(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Clinical_Pick/MANIFEST.txt",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Clinical_Pick_Tier1/gdac.broadinstitute.org_BRCA.Clinical_Pick_Tier1.Level_4.2016012800.0.0.idf.txt",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Clinical_Pick_Tier1/gdac.broadinstitute.org_BRCA.Clinical_Pick_Tier1.Level_4.2016012800.0.0.parameters.properties",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Clinical_Pick_Tier1/gdac.broadinstitute.org_BRCA.Clinical_Pick_Tier1.Level_4.2016012800.0.0.sdrf.txt",
header = FALSE, fill = TRUE)
View(TCGA)
rm(list=ls())
TCGA = read.table("Raw_data/TCGA/BRCA.Clinical_Pick_Tier1.Level/All_CDEs.txt",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Merge_Clinical.aux/22216572_stderr.txt",
header = FALSE, fill = TRUE)
TCGA = read.table("Raw_data/TCGA/BRCA.Merge_Clinical.aux/22216572_stdout.txt",
header = FALSE, fill = TRUE)
View(TCGA)
TCGA = read.table("Raw_data/TCGA/BRCA.Merge_Clinical.Level/BRCA.clin.merged.txt",
header = FALSE, fill = TRUE)
View(TCGA)
T2 = read.table("Raw_data/TCGA/BRCA.Merge_Clinical.Level/BRCA.merged_only_clinical_clin_format.txt",
header = FALSE, fill = TRUE)
View(TCGA)
T2 = read.table("Raw_data/TCGA/BRCA.Merge_Clinical.mage/gdac.broadinstitute.org_BRCA.Merge_Clinical.Level_1.2016012800.0.0.idf.txt",
header = FALSE, fill = TRUE)
View(TCGA)
T2 = read.table("Raw_data/TCGA/BRCA.Merge_Clinical.mage/gdac.broadinstitute.org_BRCA.Merge_Clinical.Level_1.2016012800.0.0.sdrf.txt",
header = FALSE, fill = TRUE)
View(TCGA)
T1 = read.table("Raw_data/TCGA/BRCA.Clinical_Pick_Tier1.Level/All_CDEs.txt",
header = FALSE, fill = TRUE)
View(T1)
View(T1)
View(T1)
T2 = read.table("Raw_data/TCGA/All_CDEs.txt",
header = FALSE, fill = TRUE)
View(T2)
T2 = read.table("Raw_data/TCGA/STAD.Merge_Clinical./STAD.clin.merged.txt",
header = FALSE, fill = TRUE)
View(T2)
sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
View(sen)
T2 = read.table("Raw_data/TCGA/BRCA.Merge_Clinical.Level/BRCA.clin.merged.txt",
header = FALSE, fill = TRUE)
View(T2)
