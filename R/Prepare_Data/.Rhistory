library(reactome.db)
conv_table = readRDS("Processed_data/S7/biomart_conversion_table.rds")
gene2path = as.list(reactomePATHID2EXTID)
gene2path[["R-HSA-111469"]]
gene2path[["331"]]
gene2path = as.list(reactomeEXTID2PATHID)
gene2path[["331"]]
View(gene2path)
gene2path[["331"]]
path2gene[[gene2path[["331"]]]]
path2gene = as.list(reactomePATHID2EXTID)
path2gene[[gene2path[["331"]]]]
gene2path[["331"]]
pw = gene2path[["331"]]
pw
path2gene[[pw]]
pw
path2gene[["R-HSA-109581" ]]
pw = gene2path[["331"]]
pw
path2gene[["R-HSA-8948747"]]
path2gene[["R-HSA-8948751"]]
pw = gene2path[["331"]]
pw
i="R-HSA-109581"
genes_i = path2gene[[i]]
genes_i
gene_pathways = list()
for( i in pw){
genes_pathways = list(gene_pathways, path2gene[[i]])
}
View(gene_pathways)
pw
i="R-HSA-109581"
path2gene[[i]]
gene_pathways = list()
list(gene_pathways, path2gene[[i]])
gene_pathways = list()
for( i in pw){
gene_pathways = list(gene_pathways, path2gene[[i]])
}
View(gene_pathways)
gene_pathways = list()
for( i in pw){
gene_pathways =  path2gene[[i]]
}
rm(list=ls())
library(reactome.db)
conv_table = readRDS("Processed_data/S7/biomart_conversion_table.rds")
gene2path = as.list(reactomeEXTID2PATHID)
path2gene = as.list(reactomePATHID2EXTID)
pw = gene2path[["331"]]
gene_pathways = list()
for( i in pw){
gene_pathways =  path2gene[[i]]
}
gene_pathways = list()
for( i in pw){
gene_pathways[[i]] = path2gene[[i]]
}
View(gene_pathways)
gene_pathways = list()
all_genes = c()
for( i in pw){
gene_pathways[[i]] = path2gene[[i]]
all_genes = c(all_genes, path2gene[[i]])
}
gene_pathways = list()
all_genes = c()
for( i in pw){
gene_pathways[[i]] = path2gene[[i]]
all_genes = data.frame(all_genes, path2gene[[i]])
}
gene_pathways = list()
all_genes = c()
for( i in pw){
gene_pathways[[i]] = path2gene[[i]]
all_genes = c(all_genes, path2gene[[i]])
}
all_genes = data.frame(all_genes)
View(all_genes)
gene_pathways = list()
all_genes = c()
for( i in pw){
gene_pathways[[i]] = path2gene[[i]]
all_genes = c(all_genes, path2gene[[i]])
}
all_genes = data.frame(unique(all_genes))
conv_table$entrezgene_id %in% all_genes[,1]
which(conv_table$entrezgene_id %in% all_genes[,1])
conv_table[which(conv_table$entrezgene_id %in% all_genes[,1]),c(3,4)]
all_genes = conv_table[which(conv_table$entrezgene_id %in% all_genes[,1]),c(3,4)]
View(all_genes)
saveRDS(all_genes,"Processed_data/S26/cisplatin_gene_pathways.rds")
View(all_genes)
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
GE = GE[,cisplatin_genes$hgnc_symbol]
#GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
GE = GE[,cisplatin_genes$hgnc_symbol]
cisplatin_genes$hgnc_symbol
I = intersect(colnames(GE),cisplatin_genes$hgnc_symbol)
I
GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
I = intersect(colnames(GE),cisplatin_genes$hgnc_symbol)
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
TCGA_good_drugs = c("bicalutamide", "docetaxel", "etoposide", "paclitaxel", "leucovorin",
"dacarbazine", "methotrexate", "ifosfamide", "gemcitabine",
"vincristine", "cisplatin","vinblastine")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
#sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
sen = readRDS("Processed_data/S1/sensitivity_matrix_AUC.rds")
#TCGA_PRISM_drugs_all = readRDS("Processed_data/S21/Drugs_TCGA@PRISM.rds")
TCGA_PRISM_drugs_sig_samples = readRDS("Processed_data/Other/PRISM_TCGA_drugs.rds")
which(colnames(sen) %in% TCGA_PRISM_drugs_sig_samples)
I =intersect(colnames(sen),TCGA_PRISM_drugs_sig_samples)
sen = sen[,I]
source("F14-Feature_Selection.R")
selected_features = c("Whole_genes")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
Results = c()
#4,5,14,16,17,31,39,48,75,78
for (i in 21){
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
#X = scale(X)
# Ytrain normalization
#Mean_y = mean(y)
#STD_y = sd(y)
#y = (y-Mean_y)/STD_y
clusterExport(cl, c("X","y","i","index"))
clusterEvalQ(cl, c(library(caTools),source("F7-RandomForest.R"),
source("F6-ENet.R"),source("F8-MLP.R"),source("F10-Ridge.R"),
source("F11-SGL.R"),source("F13-Lasso.R")))
RepLoop = function(j){
sample = sample.split(y, SplitRatio = .9)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Models
#y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_MLP = MLP(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
# Evaluation
#corr_SGL = cor(ytest,y_pred_SGL)
#corr_RF = cor(ytest,y_pred_RF)
#corr_ENet = cor(ytest,y_pred_ENet)
#corr_Lasso = cor(ytest,y_pred_Lasso)
corr_Ridge = cor(ytest,y_pred_Ridge)
#corr_MLP = cor(ytest,y_pred_MLP)
result = data.frame(corr_Ridge = corr_Ridge)
#corr_SGL = corr_SGL,
#corr_RF = corr_RF,
#corr_ENet = corr_ENet,
#corr_Lasso = corr_Lasso,
#corr_MLP = corr_MLP)
return(result)
}
N_itration = 12
result = parLapply(cl, sapply(1:N_itration, list), RepLoop)
Result = data.frame()
for (k in 1:N_itration){
Result = rbind(Result, result[[k]])
}
Result_mean = apply(Result, 2, mean)
Result_sd = apply(Result, 2, sd)
print(Result_mean)
Results = rbind(Results, c(Result_mean, Result_sd))
}
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
dim(X)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S26-Read_gene_pathway.R")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways_lists.rds")
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
#GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways_lists.rds")
View(cisplatin_genes)
cisplatin_genes = cisplatin_genes[[1]]
conv_table = readRDS("Processed_data/S7/biomart_conversion_table.rds")
all_genes = conv_table[which(conv_table$entrezgene_id %in% cisplatin_genes),c(3,4)]
View(all_genes)
I = intersect(colnames(GE),all_genes)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
conv_table = readRDS("Processed_data/S7/biomart_conversion_table.rds")
#GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
#cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways_lists.rds")
cisplatin_genes = cisplatin_genes[[1]]
all_genes = conv_table[which(conv_table$entrezgene_id %in% cisplatin_genes),c(3,4)]
I = intersect(colnames(GE),all_genes)
colnames(GE)
View(all_genes)
genes_i = conv_table[which(conv_table$entrezgene_id %in% cisplatin_genes),c(3,4)]
I = intersect(colnames(GE),genes_i$hgnc_symbol)
#I = intersect(colnames(GE),cisplatin_genes$hgnc_symbol)
GE = GE[,I]
I
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
dim(X)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/S26-Read_gene_pathway.R")
View(gene_pathways)
rm(list=ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
conv_table = readRDS("Processed_data/S7/biomart_conversion_table.rds")
#GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
#cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways_lists.rds")
cisplatin_genes = cisplatin_genes[[2]]
genes_i = conv_table[which(conv_table$entrezgene_id %in% cisplatin_genes),c(3,4)]
I = intersect(colnames(GE),genes_i$hgnc_symbol)
#I = intersect(colnames(GE),cisplatin_genes$hgnc_symbol)
GE = GE[,I]
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
dim(X)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
#cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways_lists.rds")
View(cisplatin_genes)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
#cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways_lists.rds")
View(cisplatin_genes)
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/F14-Feature_Selection.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
#cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways_lists.rds")
cisplatin_genes = cisplatin_genes[[c(21,24)]]
cisplatin_genes
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
conv_table = readRDS("Processed_data/S7/biomart_conversion_table.rds")
#GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
cisplatin_genes = readRDS("Processed_data/S26/cisplatin_gene_pathways.rds")
View(cisplatin_genes)
genes_i = conv_table[which(conv_table$entrezgene_id %in% cisplatin_genes),c(3,4)]
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
mean_cis = apply(X,2,function(x){return(abs(cor(x,y)))})
hist(mean_cis)
length(which(mean_cis>0.2))
which(mean_cis>0.2)
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
conv_table = readRDS("Processed_data/S7/biomart_conversion_table.rds")
GE = readRDS("Processed_Data/S23/expresion_matrix_PRISM_with@TCGA@genes.rds")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/G10-General_Framework.R")
mean_cis = apply(X,2,function(x){return(abs(cor(x,y)))})
hist(mean_cis)
which(mean_cis>0.2)
which(mean_cis>0.15)
a = which(mean_cis>0.15)
### for cisplatin
GE = readRDS("Processed_Data/S1/expresion_matrix.rds")
GE = GE[,a]
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
#sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
sen = readRDS("Processed_data/S1/sensitivity_matrix_AUC.rds")
#TCGA_PRISM_drugs_all = readRDS("Processed_data/S21/Drugs_TCGA@PRISM.rds")
TCGA_PRISM_drugs_sig_samples = readRDS("Processed_data/Other/PRISM_TCGA_drugs.rds")
which(colnames(sen) %in% TCGA_PRISM_drugs_sig_samples)
I =intersect(colnames(sen),TCGA_PRISM_drugs_sig_samples)
sen = sen[,I]
source("F14-Feature_Selection.R")
selected_features = c("Whole_genes")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
dim(omics)
source("F14-Feature_Selection.R")
selected_features = c("Whole_genes")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
Results = c()
i=21
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
sample = sample.split(y, SplitRatio = .9)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Models
#y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
source("F10-Ridge.R")
# Models
#y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
# Evaluation
#corr_SGL = cor(ytest,y_pred_SGL)
#corr_RF = cor(ytest,y_pred_RF)
#corr_ENet = cor(ytest,y_pred_ENet)
#corr_Lasso = cor(ytest,y_pred_Lasso)
corr_Ridge = cor(ytest,y_pred_Ridge)
result = data.frame(corr_Ridge = corr_Ridge)
corr_Ridge
rm(list=ls())
library(parallel)
no_cores = detectCores()
cl = makeCluster(no_cores-2)
TCGA_good_drugs = c("bicalutamide", "docetaxel", "etoposide", "paclitaxel", "leucovorin",
"dacarbazine", "methotrexate", "ifosfamide", "gemcitabine",
"vincristine", "cisplatin","vinblastine")
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
#sen = readRDS("All_Results/sen_PRISM_good_drugs.rds")
sen = readRDS("Processed_data/S1/sensitivity_matrix_AUC.rds")
#TCGA_PRISM_drugs_all = readRDS("Processed_data/S21/Drugs_TCGA@PRISM.rds")
TCGA_PRISM_drugs_sig_samples = readRDS("Processed_data/Other/PRISM_TCGA_drugs.rds")
which(colnames(sen) %in% TCGA_PRISM_drugs_sig_samples)
I =intersect(colnames(sen),TCGA_PRISM_drugs_sig_samples)
sen = sen[,I]
source("F14-Feature_Selection.R")
selected_features = c("Whole_genes")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
mean_cis = apply(X,2,function(x){return(abs(cor(x,y)))})
hist(mean_cis)
source("F14-Feature_Selection.R")
selected_features = c("Whole_genes")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
mean_cis = apply(X,2,function(x){return(abs(cor(x,y)))})
i=21
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
mean_cis = apply(X,2,function(x){return(abs(cor(x,y)))})
hist(mean_cis)
a = which(mean_cis>0.15)
which(mean_cis>0.2)
a = which(mean_cis>0.2)
source("F14-Feature_Selection.R")
selected_features = c("Whole_genes")
Omics_List = Feature_Selection(selected_features)
omics = Omics_List[[1]]
index = Omics_List[[2]]
N_drug = ncol(sen)
Results = c()
#4,5,14,16,17,31,39,48,75,78
for (i in 21){
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
#X = scale(X)
# Ytrain normalization
#Mean_y = mean(y)
#STD_y = sd(y)
#y = (y-Mean_y)/STD_y
clusterExport(cl, c("X","y","i","index"))
clusterEvalQ(cl, c(library(caTools),source("F7-RandomForest.R"),
source("F6-ENet.R"),source("F8-MLP.R"),source("F10-Ridge.R"),
source("F11-SGL.R"),source("F13-Lasso.R")))
RepLoop = function(j){
sample = sample.split(y, SplitRatio = .9)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Models
#y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_MLP = MLP(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
# Evaluation
#corr_SGL = cor(ytest,y_pred_SGL)
#corr_RF = cor(ytest,y_pred_RF)
#corr_ENet = cor(ytest,y_pred_ENet)
#corr_Lasso = cor(ytest,y_pred_Lasso)
corr_Ridge = cor(ytest,y_pred_Ridge)
#corr_MLP = cor(ytest,y_pred_MLP)
result = data.frame(corr_Ridge = corr_Ridge)
#corr_SGL = corr_SGL,
#corr_RF = corr_RF,
#corr_ENet = corr_ENet,
#corr_Lasso = corr_Lasso,
#corr_MLP = corr_MLP)
return(result)
}
N_itration = 1
result = parLapply(cl, sapply(1:N_itration, list), RepLoop)
Result = data.frame()
for (k in 1:N_itration){
Result = rbind(Result, result[[k]])
}
Result_mean = apply(Result, 2, mean)
Result_sd = apply(Result, 2, sd)
print(Result_mean)
Results = rbind(Results, c(Result_mean, Result_sd))
}
#4,5,14,16,17,31,39,48,75,78
for (i in 21){
print(paste0("The drug number is: ", as.character(i)))
X = omics[!is.na(sen[,i]),]
y = sen[!is.na(sen[,i]),i]
#X = scale(X)
# Ytrain normalization
#Mean_y = mean(y)
#STD_y = sd(y)
#y = (y-Mean_y)/STD_y
clusterExport(cl, c("X","y","i","index"))
clusterEvalQ(cl, c(library(caTools),source("F7-RandomForest.R"),
source("F6-ENet.R"),source("F8-MLP.R"),source("F10-Ridge.R"),
source("F11-SGL.R"),source("F13-Lasso.R")))
RepLoop = function(j){
sample = sample.split(y, SplitRatio = .9)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Models
#y_pred_SGL = My_SGL(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest,index = index)
#y_pred_RF = RandomForest(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_ENet = ElasticNet(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_Lasso = Lasso(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
y_pred_Ridge = Ridge(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
#y_pred_MLP = MLP(ytrain = ytrain ,Xtrain = Xtrain,Xtest = Xtest)
# Evaluation
#corr_SGL = cor(ytest,y_pred_SGL)
#corr_RF = cor(ytest,y_pred_RF)
#corr_ENet = cor(ytest,y_pred_ENet)
#corr_Lasso = cor(ytest,y_pred_Lasso)
corr_Ridge = cor(ytest,y_pred_Ridge)
#corr_MLP = cor(ytest,y_pred_MLP)
result = data.frame(corr_Ridge = corr_Ridge)
#corr_SGL = corr_SGL,
#corr_RF = corr_RF,
#corr_ENet = corr_ENet,
#corr_Lasso = corr_Lasso,
#corr_MLP = corr_MLP)
return(result)
}
N_itration = 1
result = parLapply(cl, sapply(1:N_itration, list), RepLoop)
Result = data.frame()
for (k in 1:N_itration){
Result = rbind(Result, result[[k]])
}
Result_mean = apply(Result, 2, mean)
Result_sd = apply(Result, 2, sd)
print(Result_mean)
Results = rbind(Results, c(Result_mean, Result_sd))
}
View(X)
