poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
rm(list=ls())
library(CARNIVAL)
library(dorothea)
library(OmnipathR)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/RF/")
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i = 325                            # drug number
GE = GE[!is.na(sen[,i]),]
sen_i = sen[!is.na(sen[,i]),i]
# Finding differentially expressed genes (DEGs)
Cor_GE_sen = apply(GE,2,function(x){return(abs(cor(x,sen_i)))})
idx_Cor = order(Cor_GE_sen, decreasing = TRUE)
GE = GE[,1:200]
GE = t(GE)              # input: rows are genes and columns are cell lines
# Finding transcription activities using dorothea
data(dorothea_hs, package = "dorothea")
tf_activities <- run_viper(GE, dorothea_hs,
options =  list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
TFs = rownames(tf_activities)
# Download protein-protein interactions
interactions = import_omnipath_interactions() %>% as_tibble()
net = interactions[,c(3,6,4)]
colnames(net) = c("source","interaction","target")
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
View(net)
View(interactions)
net = interactions[,c(3,6,4)]
View(net)
library(dplyr)
View(net)
View(tf_activities)
TFs
a = mutate(net$source_genesymbol %in% TFs)
a = mutate(net,net$source_genesymbol %in% TFs)
View(a)
sum(net[,4])
a = mutate(net,in_ op = net$source_genesymbol %in% TFs)
a = mutate(net,in_op = net$source_genesymbol %in% TFs)
View(a)
x = data.frame(TFs)
View(x)
sum(a$in_op)
a = mutate(net,in_op_source = net$source_genesymbol %in% TFs)
a = mutate(a,in_op_target = a$target_genesymbol %in% TFs)
sum(a$in_op_source&a$in_op_target)
which(a$in_op_source&a$in_op_target)
net2 = net[which(a$in_op_source&a$in_op_target),]
net = net[which(a$in_op_source&a$in_op_target),]
colnames(net) = c("source","interaction","target")
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
measurements = rep(1, length(TFs))
names(measurements) = TFs
net = net[1:100,]
priorKnowledgeNetwork = net
runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 3600,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
View(priorKnowledgeNetwork)
# Download protein-protein interactions
interactions = import_omnipath_interactions() %>% as_tibble()
net = interactions[,c(3,6,4)]
library(dplyr)
a = mutate(net,in_op_source = net$source_genesymbol %in% TFs)
a = mutate(a,in_op_target = a$target_genesymbol %in% TFs)
net = net[which(a$in_op_source&a$in_op_target),]
View(net)
colnames(net) = c("source","interaction","target")
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
View(net)
measurements = rep(1, length(TFs))
names(measurements) = TFs
priorKnowledgeNetwork = net
runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 3600,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
c(net$source,net$target)
s = unique(c(net$source,net$target))
s
TF2 = intersect(TFs,s)
TF2
TFs = intersect(TFs,s)
colnames(net) = c("source","interaction","target")
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
measurements = rep(1, length(TFs))
names(measurements) = TFs
priorKnowledgeNetwork = net
View(priorKnowledgeNetwork)
runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 3600,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
res = runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 3600,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
View(res)
G = colnames(GE)
View(GE)
dim(GE)
G = rownamess(GE)
G = rownames(GE)
rm(list=ls())
library(CARNIVAL)
library(dorothea)
library(OmnipathR)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/RF/")
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i = 325                            # drug number
GE = GE[!is.na(sen[,i]),]
sen_i = sen[!is.na(sen[,i]),i]
# Finding differentially expressed genes (DEGs)
Cor_GE_sen = apply(GE,2,function(x){return(abs(cor(x,sen_i)))})
idx_Cor = order(Cor_GE_sen, decreasing = TRUE)
GE = GE[,1:2000]
GE = t(GE)              # input: rows are genes and columns are cell lines
dim(GE)
# Finding transcription activities using dorothea
data(dorothea_hs, package = "dorothea")
tf_activities <- run_viper(GE, dorothea_hs,
options =  list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
TFs = rownames(tf_activities)
# Download protein-protein interactions
interactions = import_omnipath_interactions() %>% as_tibble()
net = interactions[,c(3,6,4)]
library(dplyr)
a = mutate(net,in_op_source = net$source_genesymbol %in% TFs)
a = mutate(a,in_op_target = a$target_genesymbol %in% TFs)
net = net[which(a$in_op_source&a$in_op_target),]
s = unique(c(net$source,net$target))
TFs = intersect(TFs,s)
colnames(net) = c("source","interaction","target")
s = unique(c(net$source,net$target))
TFs = intersect(TFs,s)
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
measurements = rep(1, length(TFs))
names(measurements) = TFs
priorKnowledgeNetwork = net
res = runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 3600,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
View(net)
rm(list=ls())
library(CARNIVAL)
rm(list=ls())
library(CARNIVAL)
library(dplyr)
library(tibble)
library(dorothea)
library(OmnipathR)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/RF/")
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
dim(GE)
i = 325                            # drug number
GE = GE[!is.na(sen[,i]),]
sen_i = sen[!is.na(sen[,i]),i]
dim(GE)
dim(sen_i)
length(sen_i)
# Finding differentially expressed genes (DEGs)
Cor_GE_sen = apply(GE,2,function(x){return(abs(cor(x,sen_i)))})
idx_Cor = order(Cor_GE_sen, decreasing = TRUE)
GE = GE[,1:2000]
GE = t(GE)              # input: rows are genes and columns are cell lines
dim(GE)
dim(GE)
# Finding transcription activities using dorothea
data(dorothea_hs, package = "dorothea")
tf_activities <- run_viper(GE, dorothea_hs,
options =  list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
TFs = rownames(tf_activities)
# Download protein-protein interactions
interactions = import_omnipath_interactions() %>% as_tibble()
net = interactions[,c(3,6,4)]
a = mutate(net,in_OP_source = net$source_genesymbol %in% TFs)
View(a)
sum(a$in_OP_source)
a = mutate(a,in_OP_target = a$target_genesymbol %in% TFs)
sum(a$in_OP_source & a$in_OP_target)
net = net[which(a$in_OP_source&a$in_OP_target),]
View(net)
colnames(net) = c("source","interaction","target")
s = unique(c(net$source,net$target))
intersect(TFs,s)
TFs = intersect(TFs,s)
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
measurements = rep(1, length(TFs))
names(measurements) = TFs
priorKnowledgeNetwork = net
res = runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 3600,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
res = runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 7200,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
GE = GE[,1:500]
GE = t(GE)              # input: rows are genes and columns are cell lines
rm(list=ls())
library(CARNIVAL)
library(dplyr)
library(tibble)
library(dorothea)
library(OmnipathR)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/RF/")
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i = 325                            # drug number
GE = GE[!is.na(sen[,i]),]
sen_i = sen[!is.na(sen[,i]),i]
# Finding differentially expressed genes (DEGs)
Cor_GE_sen = apply(GE,2,function(x){return(abs(cor(x,sen_i)))})
idx_Cor = order(Cor_GE_sen, decreasing = TRUE)
GE = GE[,1:500]
GE = t(GE)              # input: rows are genes and columns are cell lines
# Finding transcription activities using dorothea
data(dorothea_hs, package = "dorothea")
tf_activities <- run_viper(GE, dorothea_hs,
options =  list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
TFs = rownames(tf_activities)
# Download protein-protein interactions
interactions = import_omnipath_interactions() %>% as_tibble()
net = interactions[,c(3,6,4)]
a = mutate(net,in_OP_source = net$source_genesymbol %in% TFs)
a = mutate(a,in_OP_target = a$target_genesymbol %in% TFs)
net = net[which(a$in_OP_source&a$in_OP_target),]
colnames(net) = c("source","interaction","target")
s = unique(c(net$source,net$target))
TFs = intersect(TFs,s)
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
measurements = rep(1, length(TFs))
names(measurements) = TFs
priorKnowledgeNetwork = net
res = runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 7200,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
View(res)
rm(list=ls())
library(CARNIVAL)
library(dplyr)
library(tibble)
library(dorothea)
library(OmnipathR)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/RF/")
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i = 325                            # drug number
GE = GE[!is.na(sen[,i]),]
sen_i = sen[!is.na(sen[,i]),i]
# Finding differentially expressed genes (DEGs)
Cor_GE_sen = apply(GE,2,function(x){return(abs(cor(x,sen_i)))})
idx_Cor = order(Cor_GE_sen, decreasing = TRUE)
GE = GE[,1:1000]
GE = t(GE)              # input: rows are genes and columns are cell lines
# Finding transcription activities using dorothea
data(dorothea_hs, package = "dorothea")
tf_activities <- run_viper(GE, dorothea_hs,
options =  list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
TFs = rownames(tf_activities)
# Download protein-protein interactions
interactions = import_omnipath_interactions() %>% as_tibble()
net = interactions[,c(3,6,4)]
a = mutate(net,in_OP_source = net$source_genesymbol %in% TFs)
a = mutate(a,in_OP_target = a$target_genesymbol %in% TFs)
net = net[which(a$in_OP_source&a$in_OP_target),]
colnames(net) = c("source","interaction","target")
s = unique(c(net$source,net$target))
TFs = intersect(TFs,s)
n = replace(net$interaction, net$interaction==0,-1)
n = ifelse(net$interaction==0,-1,1)
net[,2]=n
measurements = rep(1, length(TFs))
names(measurements) = TFs
priorKnowledgeNetwork = net
res = runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 7200,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
memory.limit()
library(usethis)
usethis::edit_r_environ()
rm(large_df, large_list, large_vector, temp_variables)
res = runCARNIVAL(
inputObj = NULL,
measObj = measurements,
netObj = priorKnowledgeNetwork,
weightObj = NULL,
solverPath = "/Users/faren/Softwares/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
solver = "cplex",
timelimit = 7200,
mipGAP = 0.05,
poolrelGAP = 1e-04,
limitPop = 500,
poolCap = 100,
poolIntensity = 4,
poolReplace = 2,
alphaWeight = 1,
betaWeight = 0.2,
threads = 0,
cleanTmpFiles = TRUE,
keepLPFiles = TRUE,
clonelog = -1,
dir_name = getwd()
)
library(usethis)
usethis::edit_r_environ()
