setwd("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_PRISM.R")
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_PRISM.R")
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_PRISM.R")
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_PRISM.R")
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_PRISM.R")
rm(list = ls())
require(caTools)
library(corrplot)
library(glmnet)
library(RColorBrewer)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i=325
X = GE[!is.na(sen[,i]),]           # remove cell lines that are "NA" For each drug
y = sen[!is.na(sen[,i]),i]
## Split data into train & test
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
dim(Xtrain)
length(ytrain)
train_data = cbind(Xtrain,ytrain)
dim(train_data)
View(train_data)
train_data = cbind(t(Xtrain),ytrain)
train_data = cbind(t(Xtrain),t(ytrain))
train_data = cbind(Xtrain,ytrain)
# Model Building : Elastic Net Regression
control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random",
verboseIter = TRUE)
library(glmnet)
# Model Building : Elastic Net Regression
control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random",
verboseIter = TRUE)
library(caret)
install.packages("caret")
library(caret)
# Model Building : Elastic Net Regression
control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random",
verboseIter = TRUE)
model$bestTune
# Training ELastic Net Regression model
elastic_model <- train(y, data = train_data,
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl = control)
data(Hitters, package = "ISLR")
y ~ .
data <- Boston
library(MASS)
data <- Boston
rm(list = ls())
library(MASS)
data <- Boston
View(data)
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.7, 0.3))
ind
ind <- sample(3, nrow(data), replace = TRUE, prob = c(0.7, 0.3))
ind <- sample(3, nrow(data), replace = TRUE, prob = c(0.6, 0.3,0.1))
ind
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.6, 0.3))
train <- data[ind==1,]
test <- data[ind==2,]
custom <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
verboseIter = TRUE)
medv~.
View(train)
en <- train(medv~.,
train,
method='glmnet',
tuneGrid =expand.grid(alpha=seq(0,1,length=10),
lambda = seq(0.0001,0.2,length=5)),
trControl=custom)
e
en
library(datasets)
lm( myFormula, data=iris)
fit <- glmnet(x = X, y = y)
rm(list = ls())
require(caTools)
library(corrplot)
library(glmnet)
library(RColorBrewer)
library(caret)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i=325
X = GE[!is.na(sen[,i]),]           # remove cell lines that are "NA" For each drug
y = sen[!is.na(sen[,i]),i]
Rep = 2
corr = rep(0,Rep)
mse = rep(0,Rep)
## Split data into train & test
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
train_data = cbind(Xtrain,ytrain)
fit = glmnet(x = Xtrain, y = ytrain)
print(fit)
cvfit <- cv.glmnet(x = Xtrain, y = ytrain)
plot(cvfit)
cvfit$lambda.min
rm(list = ls())
library(MASS)
data <- Boston
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.6, 0.3))
train <- data[ind==1,]
test <- data[ind==2,]
custom <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
verboseIter = TRUE)
en <- train(medv~.,
train,
method='glmnet',
tuneGrid =expand.grid(alpha=seq(0,1,length=10),
lambda = seq(0.0001,0.2,length=5)),
trControl=custom)
en$bestTune
coef(en$finalModel, en$bestTune$lambda)
rm(list = ls())
require(caTools)
library(corrplot)
library(glmnet)
library(RColorBrewer)
library(caret)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i=325
X = GE[!is.na(sen[,i]),]           # remove cell lines that are "NA" For each drug
y = sen[!is.na(sen[,i]),i]
Rep = 2
corr = rep(0,Rep)
mse = rep(0,Rep)
## Split data into train & test
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
train_data = cbind(Xtrain,ytrain)
train_data = cbind(Xtrain,ytrain)
View(train_data)
a = dataframe(colnames(train_data))
a = data.frame(colnames(train_data))
View(a)
# Model Building : Elastic Net Regression
control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random",
verboseIter = TRUE)
# Training ELastic Net Regression model
elastic_model <- train(ytrain ~., data = train_data,
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl = control)
train_data[1,"LIMS3L"]
data.frame(colnames(GE))
b=data.frame(colnames(GE))
View(b)
# Training ELastic Net Regression model
elastic_model <- train(ytrain ~., data = train_data,
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl = control)
rm(list = ls())
rm(list = ls())
rm(list = ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
# Library -----------------------------------------------------------------
library('rtracklayer')
library(ggplot2)
# Read Data ---------------------------------------------------------------
cellline_info = read.csv("PRISM_Raw_data/Secondary/secondary-screen-cell-line-info.csv")
response = read.csv("PRISM_Raw_data/Secondary/secondary-screen-dose-response-curve-parameters.csv")
RNAseq = read.table("PRISM_Raw_data/Expression/RNA_seq/CCLE_RNAseq_rsem_transcripts_tpm_20180929.txt.gz",
header = TRUE, check.names = FALSE)
gene_transfer = import("PRISM_Raw_data/Expression/RNA_seq/gencode.v19.genes.v7_model.patched_contigs.gtf.gz")
gene_transfer = data.frame(gene_transfer)
View(gene_transfer)
# Pre-processing ----------------------------------------------------------
## Log normalization of genes
expr_raw = RNAseq[,c(-1,-2)]
expr = log2(expr_raw + 1)
## Remove cell lines that do not exist in response from expression
ccle_name_intersect = colnames(expr) %in% response$ccle_name
expr = expr[,ccle_name_intersect]
dim(expr)
expr = cbind(RNAseq[,1],expr)
## Remove expressions with low mean
mean_expr = apply(expr[,-1], 1, mean)
hist(mean_expr,100,xlim = c(0,5))
abline(v = 0.2, col ="red")
expr = expr[mean_expr > 0.2,]
dim(expr)
rownames(expr) = 1:nrow(expr)
## Remove cell lines that do not exist in response from expression
expr1 = expr[,-1]
View(response)
## Convert ccle_name to depmap_id in expression matrix
id_name = response[,c(2,3)]
id_nam = cbind(response$depmap_id,response$ccle_name)
View(id_nam)
View(id_name)
View(id_name)
rm("id_nam")
id_name = id_name[!duplicated(id_name[,2]),]
id_name = id_name[!is.na(id_name[,2]),]
rownames(id_name) = id_name[,2]
dep_id = id_name[colnames(expr1),1]
colnames(expr1) = dep_id
expr = cbind(expr[,1],expr1)
rm(expr1)
View(expr)
## Find duplicated genes and calculate the average of them
dup_ind = which(duplicated(expr[,1]))
dup_ind
dup_ENS = unique(expr[dup_ind,1])
dup_ENS
ind = c()
for (i in dup_ENS){
ind_i = which(expr[,1] == i)
ave_dup_ENS_i = apply(expr[ind_i,-1],2,mean)
expr[ind_i[1],-1] = ave_dup_ENS_i
ind = c(ind,ind_i[-1])
}
expr = expr[-ind,]
rownames(expr) = expr[,1]
expr = expr[,-1]
expr = t(expr)
dim(expr)
gene_transfer1 = gene_transfer[,c("gene_id","gene_name")]
View(gene_transfer1)
gene_transfer1 = gene_transfer1[!duplicated(gene_transfer1[,1]),]
intersect_gene_id = intersect(gene_transfer1$gene_id, colnames(expr))
expr = expr[,intersect_gene_id]
intersect_gene_id
View(expr)
intersect_gene_id = intersect(colnames(expr), gene_transfer1$gene_id)
intersect_gene_id
expr = expr[,intersect_gene_id]
gene_transfer1[gene_transfer1$gene_id %in% intersect_gene_id,2]
gene_transfer1$gene_id %in% intersect_gene_id
rm(list = ls())
setwd("~/Desktop/Cancer_DRP/R/Prepare_Data/")
# Library -----------------------------------------------------------------
library('rtracklayer')
library(ggplot2)
# Read Data ---------------------------------------------------------------
cellline_info = read.csv("PRISM_Raw_data/Secondary/secondary-screen-cell-line-info.csv")
response = read.csv("PRISM_Raw_data/Secondary/secondary-screen-dose-response-curve-parameters.csv")
RNAseq = read.table("PRISM_Raw_data/Expression/RNA_seq/CCLE_RNAseq_rsem_transcripts_tpm_20180929.txt.gz",
header = TRUE, check.names = FALSE)
#RNAseq = read.table("PRISM_Raw_data/Expression/RNA_seq/CCLE_RNAseq_genes_rpkm_20180929.gct.txt",
#skip = 2, header = TRUE, sep = "\t")
gene_transfer = import("PRISM_Raw_data/Expression/RNA_seq/gencode.v19.genes.v7_model.patched_contigs.gtf.gz")
gene_transfer = data.frame(gene_transfer)
# Pre-processing ----------------------------------------------------------
## Log normalization of genes
expr_raw = RNAseq[,c(-1,-2)]
expr = log2(expr_raw + 1)
## Remove cell lines that do not exist in response from expression
ccle_name_intersect = colnames(expr) %in% response$ccle_name
expr = expr[,ccle_name_intersect]
### Depict Figure 1.A
#expr_mean = apply(expr, 1, mean)
#pdf(file = "Figures/Fig1_A_expr_mean.pdf", width = 5, height = 3.5)
#hist(expr_mean, 100,main = "Histogram of expression mean",xlab = " ")
#dev.off()
### Depict Figure 1.B
#expr_sd = apply(expr, 1, sd)
#pdf(file = "Figures/Fig1_B_expr_sd.pdf", width = 5, height = 3.5)
#hist(expr_sd, 100, xlim = c(0,2), main = "Histogram of expression SD", xlab = " ")
#dev.off()
expr = cbind(RNAseq[,1],expr)
## Remove expressions with low mean
mean_expr = apply(expr[,-1], 1, mean)
hist(mean_expr,100,xlim = c(0,5))
abline(v = 0.2, col ="red")
expr = expr[mean_expr > 0.2,]
### Depict Figure 2.A
#mean_expr = mean_expr[mean_expr>1]
#pdf(file = "Figures/Fig2_A_expr_mean_filter.pdf", width = 5, height = 3.5)
#hist(mean_expr, 100, main = "Histogram of expression mean",xlab = " ")
#dev.off()
## Remove expressions with low std
# sd_expr = apply(expr[,-1], 1, sd)
# hist(sd_expr,100)
# abline(v = 0.45, col ="red")
# expr = expr[sd_expr > 0.45,]
### Depict Figure 2.B
#sd_expr = sd_expr[sd_expr>0.5]
#pdf(file = "Figures/Fig2_B_expr_sd_filter.pdf", width = 5, height = 3.5)
#hist(sd_expr, 100, xlim = c(0,2), main = "Histogram of expression SD",xlab = " ")
#dev.off()
## Some of the numbers has been removed in the previous steps thus we
#assign new numbers to rownames
rownames(expr) = 1:nrow(expr)
## Remove cell lines that do not exist in response from expression
expr1 = expr[,-1]
## Convert ccle_name to depmap_id in expression matrix
id_name = response[,c(2,3)]
id_name = id_name[!duplicated(id_name[,2]),]
id_name = id_name[!is.na(id_name[,2]),]
rownames(id_name) = id_name[,2]
dep_id = id_name[colnames(expr1),1]
colnames(expr1) = dep_id
expr = cbind(expr[,1],expr1)
rm(expr1)
## Find duplicated genes and calculate the average of them
dup_ind = which(duplicated(expr[,1]))
dup_ENS = unique(expr[dup_ind,1])
ind = c()
for (i in dup_ENS){
ind_i = which(expr[,1] == i)
ave_dup_ENS_i = apply(expr[ind_i,-1],2,mean)
expr[ind_i[1],-1] = ave_dup_ENS_i
ind = c(ind,ind_i[-1])
}
Expr = expr[-ind,]
rownames(Expr) = Expr[,1]
Expr = Expr[,-1]
Expr = t(Expr)
dim(Expr)
gene_transfer1 = gene_transfer[,c("gene_id","gene_name")]
gene_transfer1 = gene_transfer1[!duplicated(gene_transfer1[,1]),]
dim(gene_transfer1)
intersect_gene_id = intersect(gene_transfer1$gene_id, colnames(Expr))
a = data.frame(intersect_gene_id)
View(a)
View(Expr)
Expr2 = Expr[,intersect_gene_id]
View(Expr2)
Expr = Expr[,intersect_gene_id]
b =gene_transfer1$gene_id %in% intersect_gene_id
b =data.frame(gene_transfer1$gene_id %in% intersect_gene_id)
View(b)
colnames(Expr) = gene_transfer1[gene_transfer1$gene_id %in% intersect_gene_id,2]
dim(Expr)
length(unique(colnames(Expr))
)
which(duplicated(colnames(Expr)))
(duplicated(colnames(Expr)))
col_Exp = colnames(Expr)
col_Exp = colnames(Expr)
dup_gene_symbs = col_Exp[duplicated(colnames(Expr))]
dup_gene_symbs
col_Exp = data.frame(colnames(Expr))
View(col_Exp)
dup_gene_symbs_ind = which[duplicated(colnames(Expr))]
dup_gene_symbs_ind = which(duplicated(colnames(Expr)))
dup_gene_symbs_ind
k = LIMS3L
k = "LIMS3L"
which(colnames(Expr)==k)
i = which(colnames(Expr)==k)
i
Expr[,i]
which(colnames(Expr)==k)
mean(Expr[,2908])
mean(Expr[,2909])
which(colnames(Expr)==k)
dup_gene_symbs
k="CRYBG3"
which(colnames(Expr)==k
)
ind_rep = which(colnames(Expr)==k)
Expr[,ind_rep]
Expr[,ind_rep] = apply(Expr[,ind_rep],1,mean)
Expr[,ind_rep]
ind_rep
dup_gene_symbs_ind
dup_gene_symbs
dup_gene_symbs = unique(col_Exp[duplicated(colnames(Expr))])
dup_gene_symbs
col_Exp[duplicated(colnames(Expr))]
col_Exp[duplicated(colnames(Expr))]
Expr = expr[-ind,]
rownames(Expr) = Expr[,1]
Expr = Expr[,-1]
Expr = t(Expr)
gene_transfer1 = gene_transfer[,c("gene_id","gene_name")]
gene_transfer1 = gene_transfer1[!duplicated(gene_transfer1[,1]),]
intersect_gene_id = intersect(gene_transfer1$gene_id, colnames(Expr))
Expr = Expr[,intersect_gene_id]
colnames(Expr) = gene_transfer1[gene_transfer1$gene_id %in% intersect_gene_id,2]
# Removing repeatative gene-symboles
col_Exp = data.frame(colnames(Expr))
dup_gene_symbs = unique(col_Exp[duplicated(colnames(Expr))])
col_Exp[duplicated(colnames(Expr))]
duplicated(colnames(Expr))
Expr = expr[-ind,]
rownames(Expr) = Expr[,1]
Expr = Expr[,-1]
Expr = t(Expr)
gene_transfer1 = gene_transfer[,c("gene_id","gene_name")]
gene_transfer1 = gene_transfer1[!duplicated(gene_transfer1[,1]),]
intersect_gene_id = intersect(gene_transfer1$gene_id, colnames(Expr))
Expr = Expr[,intersect_gene_id]
colnames(Expr) = gene_transfer1[gene_transfer1$gene_id %in% intersect_gene_id,2]
# Removing repeatative gene-symboles
col_Exp = data.frame(colnames(Expr))
length(col_Exp)
# Removing repeatative gene-symboles
col_Exp = colnames(Expr)
dup_gene_symbs = unique(col_Exp[duplicated(colnames(Expr))])
Expr = expr[-ind,]
rownames(Expr) = Expr[,1]
Expr = Expr[,-1]
Expr = t(Expr)
gene_transfer1 = gene_transfer[,c("gene_id","gene_name")]
gene_transfer1 = gene_transfer1[!duplicated(gene_transfer1[,1]),]
intersect_gene_id = intersect(gene_transfer1$gene_id, colnames(Expr))
Expr = Expr[,intersect_gene_id]
colnames(Expr) = gene_transfer1[gene_transfer1$gene_id %in% intersect_gene_id,2]
# Removing repeatative gene-symboles
col_Exp = colnames(Expr)
dup_gene_symbs = unique(col_Exp[duplicated(colnames(Expr))])
ind_extra = c()
for (k in dup_gene_symbs){
ind_rep = which(colnames(Expr)==k)
Expr[,ind_rep] = apply(Expr[,ind_rep],1,mean)
ind_extra = c(ind_extra,ind_rep[-1])
}
Expr = Expr[,-ind_extra]
dim(Expr)
dim(expr)
Expr = expr[-ind,]
dim(Expr)
rownames(Expr) = Expr[,1]
Expr = Expr[,-1]
Expr = t(Expr)
gene_transfer1 = gene_transfer[,c("gene_id","gene_name")]
gene_transfer1 = gene_transfer1[!duplicated(gene_transfer1[,1]),]
intersect_gene_id = intersect(gene_transfer1$gene_id, colnames(Expr))
Expr = Expr[,intersect_gene_id]
colnames(Expr) = gene_transfer1[gene_transfer1$gene_id %in% intersect_gene_id,2]
# Removing repeatative gene-symboles
col_Exp = colnames(Expr)
dup_gene_symbs = unique(col_Exp[duplicated(colnames(Expr))])
ind_extra = c()
for (k in dup_gene_symbs){
ind_rep = which(colnames(Expr)==k)
Expr[,ind_rep] = apply(Expr[,ind_rep],1,mean)
ind_extra = c(ind_extra,ind_rep[-1])
}
Expr = Expr[,-ind_extra]
cell_id = rownames(Expr)
drug_name = unique(response$name)
# Save Data ---------------------------------------------------------------
## 1) sen matrix is saved in line 115 without normalization
saveRDS(Expr, file = "Processed_Data/Step1/expresion_matrix.rds")
write.table(Expr, file = "Processed_Data/Step1/expresion_matrix.csv",
row.names = TRUE, col.names = TRUE, quote = FALSE, sep = ",")
saveRDS(gene_transfer1, file = "Processed_Data/Step1/gene_transfer.rds")
dim(Expr)
read.table("Raw_data/TF_gsva.csv",header = TRUE, check.names = FALSE)
read.table("Raw_data/TF_gsva.csv",header = TRUE)
library(randomForest)
require(caTools)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/RF/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
read.table("Raw_data/TF_gsva.csv",header = TRUE)
read.table("Raw_data/TF_gsva.csv",header = TRUE, check.names = FALSE)
TF = read.table("Raw_data/TF_gsva.csv",header = TRUE, check.names = FALSE)
View(TF)
View(TF)
TF = read.table("Raw_data/TF_gsva.csv",header = TRUE)
View(TF)
TF = read.table("Raw_data/TF_gsva.csv",header = FALSE,sep = ",")
View(TF)
TF = read.table("Raw_data/TF_gsva.csv",header = TRUE,sep = ",")
View(TF)
rm(list = ls())
library(randomForest)
require(caTools)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/RF/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
TF = read.table("Raw_data/TF_gsva.csv",header = TRUE,sep = ",")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
## Classifier
Final_Cor = rep(0,20)
