library(igraph)
install.packages("igraph")
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
BiocManager::install("igraph")
source("~/Desktop/Cancer_DRP/R/Prepare_Data/General_Framework.R")
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_glmnet.R")
ytrain_norm ~.
rm(list = ls())
require(caTools)
library(corrplot)
library(glmnet)
library(caret)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i=325
X = GE[!is.na(sen[,i]),]           # remove cell lines that are "NA" For each drug
y = sen[!is.na(sen[,i]),i]
Corr = cor(X,y)
order_Corr = order(Corr, decreasing = TRUE)
X = X[,order_Corr[1:5000]]
## Split data into train & test
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Normalization
# Xtrain normalization
Mean_X = apply(Xtrain,2,mean)
STD_X = apply(Xtrain,2,sd)
Xtrain = (Xtrain-Mean_X)/STD_X
# Xtest normalization
Xtest = (Xtest-Mean_X)/STD_X
#Ytrain normalization
#Ytrain = (Ytrain-min(Ytrain))/(max(Ytrain)-min(Ytrain))
Mean_y = mean(ytrain)
STD_y = sd(ytrain)
ytrain_norm = (ytrain-Mean_y)/STD_y
train_data = cbind(Xtrain,ytrain_norm)
## Model training
# Model Building : Elastic Net Regression
control = trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
#search = "random",
verboseIter = TRUE)
tune = expand.grid(alpha = seq(.05, 1, length = 15),
lambda = seq(0.001,0.1,by = 0.01))
# Training ELastic Net Regression model
model = train(ytrain_norm ~., data = train_data,
method = "glmnet",
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_glmnet.R")
source("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/ENet_glmnet.R")
rm(list = ls())
require(caTools)
library(corrplot)
library(glmnet)
library(caret)
setwd("~/Desktop/Cancer_DRP/R/Single_Drug/ENet/")
## Read data
GE = readRDS("Raw_data/expresion_matrix.rds")
sen = readRDS("Raw_data/sensitivity_matrix.rds")
i=325
X = GE[!is.na(sen[,i]),]           # remove cell lines that are "NA" For each drug
y = sen[!is.na(sen[,i]),i]
Corr = cor(X,y)
order_Corr = order(Corr, decreasing = TRUE)
X = X[,order_Corr[1:5000]]
## Split data into train & test
sample = sample.split(y, SplitRatio = .8)
Xtrain = subset(X, sample == TRUE)
Xtest  = subset(X, sample == FALSE)
ytrain = subset(y, sample == TRUE)
ytest  = subset(y, sample == FALSE)
# Normalization
# Xtrain normalization
Mean_X = apply(Xtrain,2,mean)
STD_X = apply(Xtrain,2,sd)
Xtrain = (Xtrain-Mean_X)/STD_X
# Xtest normalization
Xtest = (Xtest-Mean_X)/STD_X
#Ytrain normalization
#Ytrain = (Ytrain-min(Ytrain))/(max(Ytrain)-min(Ytrain))
Mean_y = mean(ytrain)
STD_y = sd(ytrain)
ytrain_norm = (ytrain-Mean_y)/STD_y
train_data = cbind(Xtrain,ytrain_norm)
## Model training
# Model Building : Elastic Net Regression
control = trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
#search = "random",
verboseIter = TRUE)
tune = expand.grid(alpha = seq(.05, 1, length = 15),
lambda = seq(0.001,0.1,by = 0.01))
# Training ELastic Net Regression model
model = train(ytrain_norm ~., data = train_data,
method = "glmnet",
metric="RMSE",
allowParallel = TRUE,
tuneGrid = tune,
trControl = control)
